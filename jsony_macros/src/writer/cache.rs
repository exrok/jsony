use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"\x7f\x03\x07\n\t\x02\x95\x02\x01\xa6c|\t\x05\xc0\n\t$\n\t\x13\x03\x07\x0e\x02\x8d\x9b^\x04\x00\xb3\xa6\x81\xbd\t\n\t\xbe\n\t\xaf\n\t\xa2\x03\xc8\x02\x01\xc3\t\x05\n\t\xc3\n\tu\x03\x07\x0e\x02\x8d\n\t^\xb3\xa6}\xbd\t\n\t\xbe\n\t\xaf\n\t\xa2\x03\xc8\x02\x01\xc3\t\x05\xc0\x0e\x02\n\t\xbe\n\tH\n\t\x1d\x03\xc8\x01\x05\x07L\n\t\xc7\n\t\xba\n\ts\x02\xb3\x7f\n\tv\x95\tv\x01\xa6g\x05\xb5\x01\x9f\t\x05\xc0\n\t\xc7\n\t\x12\n\t\xae\x95\n\t\xae\x01\x9b\x8a\x04\n\t\xae\x02\n\t\x8a\x00\xa6\xb4\x05\xb5\x01\xc5\t\x05\xc0\xc7\n\t]\x0e\x02\x8d\n\t\x8a\n\tv\x02\n\tg\n\tc\n\t\x17\x03\x07\n\t\xb7\n\t0\n\t\x03\x05\xc0\n\t\xc7\n\t\xc3\n\tu\x03\x07\x01\xb1\x02\n\td\n\t\xb7\n\t4\n\t\x03\x07\x02\xc8\n\t\xb7\n\t\x16>\t\x01@\t\n\t\xbe\n\t\xa7\n\t\x98\x08\x01\x91\t\n\t\xc7\n\t\xb7\n\t3\n\t\x03\x0c\xaf\t\n\t\xbe\n\t\xaf\n\t\xa2\x03\xc8\x02\x0c\xc6\xbc\t\xaf\r\xb9\xc8\r\xb0\n\t\xc7\n\t\xb7\n\t \n\t\xc7\n\t\xb7\n\t\x1c5\t\x05\x01/\t\x05\x01-\t\x05\xb8\n\t\xc7\n\t\x89\x03\x07\x02\x02\n\t}\r{\xc5\r\xab\n\t\x93\xb8\n\t\xc7\n\t\xae\x02\n\t\xb4\x05\xb5\r\xc5\rK\xc8\x00\xc5\r\xa8\xc8\xc5\r~\xc8\xc5\r\xa8\xc8\x00\xb2\x08k\x01\xbc\r;\xc8\xc6\xb1\t\n\t\xc7\n\t\xba\n\tV\x04k\r\xb4\x00\xc5\rq\xc8\x00\xbc\r\xb4\x00\xc5\r\xa8\xc8\x00\xc5\r\x80\xc8\x00\xc6\xb1\t\n\t\xc7\n\t\xba\n\tU\x04\xc5\rj\xc8\x00\xc6a\x04\x0c\x0c\x0e\x02\x00a\xc8\x14\n\t,\xc8\xc5\r\xa1\xc8\x00\xc5\r\xad\xc8\xac\xb3\xa6w\x03\x07\x02\xc8\x0b\x02\n\t\xc7\n\t\xb7\n\t\x9d\x03\x07\n\t\xc7\n\t\xb7\n\t\x9d\n\t\x03\x07\x96\t\x05\xac\x01\x99\t\n\t\xbe\n\t\x97\n\t\x8c\xc6\xc0_\x04\x03\xb8\n\t\xc7\n\t\xba\n\tX\x02\n\t\x81\xbd\r{\x01\xc3\x01\xc6`\x04w\n\t\x03\x07\xbd\x01\xc3\x01\x05\xc0_\x00\xb2\xc6\xc4\x04`\xc2\xc4\r\xb9\n\t\x03\x02\xc8\r\xb0\xc7\n\t\xb7\n\tW.\t\xbd\x01\xa0\tw\n\t\x03\x07\x02\xc8\x01%\t\x01F\t\xc7\n\t\xb7\n\tW\x03\x07\xbb\xb5\x06\x02\xc5\r\xad\xc8\x00\x8d\n\t\x8a\xc9\x9b\x8e\x00\xc6\xa0\x04\n\t\xc7\n\t\xb7\n\t\x9d\x96\t\xac\x01\x99\t\n\t\xbe\n\t\x97\n\t\x8c\x01\x00\xc6\xc0\xaa\x04\n\t\xbe\n\t\xa7\n\tt\n\t\x03\x8e\x02\n\t\x88\xc8\x00\xc6\xc0\x87\x04\n\t\xbe\n\t\xa7\n\tt\n\t\x03\x02\n\t\x88\xc8\x00\xc6\xc0\x94\x04\x03\n\t\xbe\n\t\xaf\n\t\xa2\n\t\x82\x87\ry\xc8\r\xb9\xc8\xc6\xc0\x94\x04\xc7\n\t\xb7\n\t\x1eI\t\x01S\t\x94\x04\xa0\r\x91\xaa\ry\xc8\r\xb9\xc8\x01\xc3\x01\x9e\x05\xc0\x94\xc6\x9a\x04\xaa\rz\xc8\x00\xbd\r\xb9\n\t\x03\t\x9a\r\t\x87\rz\xc8\x01\x90\x07\xa9\x00\xc6\xc0\xaa\x04\n\t\xbe\n\t\xa7\n\tt\n\t\x03\x8e\x02\n\t\x88\xc8\x00\xb2\xc6\xc4\x01\xc3\x01\x8b\x01\xc6h\x04\xb3\x05\x0f\xb6\xb8\x0f\xacM\x00\xc6\x83\x04\xbb\x03\xb8\n\t\xc7\n\tQ\n\t\x18\x02\n\t7\x05\xc0\xc3\r#\r*\x01h\x06\x02\xbc\x01\xc4\x06\x02\xc2\xc4\xb2\x08\xa4\x05\n\t\xc7\n\t\xa5\n\tY\x04\xc3\r\x85\xc8\xbb\xc3\rP\xc8\xc6\xbc\x04\xbb\xb6\xb1\x06\x02\xb2\xa4\t\x83\xbb\xc3\ro\xc8\x05\xc7\n\t\xa5\n\t\x1a\x01\xbf\xb6\x04m\x00)\x00\xc6\xb6\x04\xb6\rR\xc8\x00\xc3\rE\x00\xc2\xc4\x05\n\t\xc7\n\t\xa5\n\t\x1f\xc6\x86\x04\xc3\r\x86\xc8\x00\x07\xa9\t\xc3\rG\x05\x86\x05\n\t\xc7\n\t\xba\n\tsl\t\xc6\xa4\t&\x00\xc6\xb6\x04\xbb\xc3\r\xbc\x01i\xa4\x04i\x00\xbc\xc6\xbf\xc8\x92\x05\n\t\xc7\n\t\xa5\n\t\x15\x07\xa9\t=\xc3\re\xc8\xbb\xc3\re\xc8\x06\x02\xc2\xbf\x01\xc1\x06\x02\xbe\n\t\xaf\n\tf\n\t\x03\xbd\r\xb9\xc8\rb\xc8\x00\xc2\xc1\xc6\xc1\x04\xbb\xc3\ro\xc8\x05\xc7\n\t\xa5\n\t\x19\x00\xbe\n\t\xaf\n\tf\n\t\x03\x00\xc2\xc1\x00\xbb\xc3\rA\xc8\n\t\xc7\n\t\xc3\n\t[\n\t\x1b\n\t\xc7\n\t\xc3\n\t[\n\t\\\x06\x02\xbb\xb3\xc3\rD\xc8\x00\xc2\xbf\x05\xc7\n\t\xba\n\ts\n\t\x89\x02\n\t}\x9f\r\x84\xbb|\r\'\xc8(\n\tC\xac\xb1\t\xc8\x04\rB\r~\xc8\x00\n\t\xc7\n\t\xba\n\t!\n\t?\n\t\xc7\n\t\xba\n\tZ\n\tn\n\t\xc7\n\t\xba\n\t\x11\n\tn\r\x80\xc8\x00\xc6\xb1\t\n\t\xc7\n\t\xba\n\t\x10\x04\r<\xc8\x00r\n\t\xc7\n\t\xae\x00\xc6\xc0p\t\x05\xc0\n\t\xc7\n\t\xba\n\tZ\x04\x04p\r9\xc8\x00\rJ\xc8\x00\\\n\t6r\n\t\xc7\n\t\xae\x00\xc6\xc0x\x04\xc7\n\t]\n\tT\x04\x05\xc0x\x00x\r:\xc8";
pub const IDENT_SIZE: usize = 184;
static NAMES: &[&str] = &[
    "AlwaysArray",
    "ArrayWriter",
    "BytesWriter",
    "Decoder",
    "Default",
    "EMPTY_OBJECT_FOR_EXTERNALLY_TAGGED_ENUM",
    "Field",
    "FromBinary",
    "FromText",
    "MULTIPLE_FIELDS_FOR_EXTERNALLY_TAGGED_ENUM",
    "NO_FIELD_MATCHED_AN_ENUM_VARIANT",
    "Object",
    "ObjectSchemaInner",
    "Result",
    "SkipFieldVisitor",
    "UNKNOWN_VARIANT",
    "UnsafeReturn",
    "ValueWriter",
    "allow",
    "at",
    "binary",
    "bitset",
    "bool",
    "byte",
    "clippy",
    "continue",
    "ctx",
    "decode_with_alias",
    "default",
    "defaults",
    "destination",
    "drops",
    "emplace_json_for_with_attribute",
    "enter_object",
    "enter_seen_object",
    "erased_drop_in_place",
    "erased_emplace_from_json",
    "fields",
    "from",
    "from_text",
    "in",
    "inner_writer",
    "into_string",
    "iter",
    "join_array_with_next_value",
    "loop",
    "name",
    "new",
    "offset",
    "peek",
    "push_unchecked_ascii",
    "question_mark",
    "read_seen_string",
    "report_error",
    "required",
    "restore_for_retry",
    "result",
    "skipped_field",
    "smart_object_comma",
    "start_json_array",
    "static",
    "str",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "take_string",
    "text",
    "to_string",
    "visitor",
    "with_capacity",
    "AlwaysObject",
    "AlwaysString",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "MISSING_CONTENT_TAG",
    "ObjectWriter",
    "Peek",
    "String",
    "TextWriter",
    "Visitor",
    "__flatten_visitor_jsony",
    "__result",
    "__scope_jsony",
    "as_mut",
    "decode_binary",
    "decode_json",
    "discard_remaining_object_fields",
    "drop_in_place",
    "encode_binary",
    "erased",
    "is_at_content",
    "join_object_with_next_value",
    "key",
    "message",
    "next_field",
    "non_terminating",
    "object_step",
    "object_writer",
    "push_colon",
    "use",
    "DecodeError",
    "MaybeUninit",
    "Parser",
    "ToBinary",
    "__schema_inner",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "byte_add",
    "decoder",
    "emplace_from_json",
    "end_json_array",
    "impl",
    "join_parent_json_value_with_next",
    "new_field_visitor",
    "new_unchecked",
    "other_tag",
    "push",
    "skip_value",
    "snapshot",
    "temp_flatten",
    "uninit",
    "FromJson",
    "Kind",
    "None",
    "PhantomData",
    "Self",
    "__TEMP",
    "automatically_derived",
    "break",
    "decode",
    "else",
    "encode_json",
    "flatten_visitor",
    "for",
    "inner",
    "marker",
    "offset_of",
    "phantom",
    "temp2",
    "type",
    "where",
    "ObjectSchema",
    "Some",
    "encoder",
    "schema",
    "start_json_object",
    "NonNull",
    "_err",
    "at_content",
    "error",
    "fn",
    "mem",
    "push_comma",
    "success",
    "temp",
    "push_str",
    "const",
    "end_json_object",
    "ToJson",
    "ptr",
    "write",
    "_",
    "if",
    "unsafe",
    "encode_json__jsony",
    "self",
    "variant",
    "__internal",
    "as",
    "cast",
    "json",
    "match",
    "value",
    "dst",
    "std",
    "Ok",
    "mut",
    "err",
    "return",
    "parser",
    "Err",
    "out",
    "let",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 16;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new(';', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Joint),
        Punct::new('\'', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('#', Spacing::Joint),
        Punct::new('|', Spacing::Alone),
        Punct::new('.', Spacing::Alone),
        Punct::new('-', Spacing::Joint),
        Punct::new('*', Spacing::Alone),
    ]
}
