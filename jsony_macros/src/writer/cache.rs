use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"f\x03\x06\n\t\x02x\x02\x01\x8eNd\t\x04\xa7\n\t\x1b\n\t\x11\x03\x06\x08\x02r\x80M\x05\r\x97\x8eh\xa2\t\n\t\xa6\n\t\x96\n\t\x8a\x03\xad\x02\x01\xaa\t\x04\n\t\xaa\n\t_\x03\x06\x08\x02r\n\tM\x97\x8eR\xa2\t\n\t\xa6\n\t\x96\n\t\x8a\x03\xad\x02\x01\xaa\t\x04\xa7\x08\x02\n\t\xa6\n\t9\n\t\x16\x03\xad\x01\x04\x06>\n\t\xac\n\t\xa4\n\t\x82\x02\x97f\n\t`x\t`\x01\x8eO\x04\x9b\x01\x85\t\x04\xa7\n\t\xac\n\t\x10\n\t\x95x\n\t\x95\x01\x80o\x05\n\t\x95\x02\n\to\r\x8e\x9d\x04\x9b\x01\xab\t\x04\xa7\xac\n\tK\x08\x02r\n\to\n\t`\x02\n\tO\n\tN\n\t\x13\x03\x06\n\t\xa1\n\t$\n\t\x03\x04\xa7\n\t\xac\n\t\xaa\n\t_\x03\x06\x01\x9e\x02\n\tU\n\t\xa1\n\t(\n\t\x03\x06\x02\xad\n\t\xa1\n\t\x120\t\x013\t\n\t\xa6\n\t\x86\n\tj\x0b\x01\x8c\t\n\t\xac\n\t\xa1\n\t\'\n\t\x03\x0c\x96\t\n\t\xa6\n\t\x96\n\t\x8a\x03\xad\x02\x0c\xa9\xa0\t\x96\x00\x99\xad\x00\x92\n\t\xac\n\t\xa1\n\t\x18\n\t\xac\n\t\xa1\n\t\x15)\t\x04\x01#\t\x04\x01\x1f\t\x04\xa9\xa7\x8d\x05\x03\x9c\n\t\xac\n\t\xa4\n\tF\x02\n\th\xa2\x00Q\x01\xaa\x01\ru\n\t\x03\x06\x02\xad\x00\x8c\xa2\x01\xaa\x01s\x04\xa7\x8d\x9c\n\t\xac\n\t]\x03\x06\x02\x02\n\tR\xab\x00\x90\n\tz\x9c\n\t\xac\n\t\x95\x02\n\t\x9d\x04\x9b\x00\xab\x00=\xad\r\xab\x00~\xad\xab\x00e\xad\xab\x00~\xad\rV\x01\xa0\x00.\xad\xa9\x9e\t\n\t\xac\n\t\xa4\n\tD\x05V\x00\x9d\r\xab\x00Y\xad\r\xa0\x00\x9d\r\xab\x00~\xad\r\xab\x00g\xad\r\xa9\x9e\t\n\t\xac\n\t\xa4\n\tC\x05\xab\x00T\xad\r\xab\x00\x88\xad\r\xab\x00\x94\xad\x93\x9e\t\xad\x05\x93\x97\x8eu\x03\x06\x02\xad\x08\x02\n\t\xac\n\t\xa1\n\t\x83\x03\x06\n\t\xac\n\t\xa1\n\t\x83\n\t\x03\x06y\t\x04\x93\x01}\t\n\t\xa6\n\t{\n\tq\xa2\x01\xaa\x01p\xac\n\t\xa1\n\tE \t\xa2\x01\x87\tu\n\t\x03\x06\x02\xad\x01\x1c\t\x017\t\xac\n\t\xa1\n\tE\x03\x06\x9a\x9b\x07\x02\xab\x00\x94\xad\rr\n\to\xae\x80t\r\xa9\x87\x05\n\t\xac\n\t\xa1\n\t\x83y\t\x93\x01}\t\n\t\xa6\n\t{\n\tq\x01\r\xa9\xa7\x91\x05\n\t\xa6\n\t\x86\n\t^\n\t\x03t\x02\n\tn\xad\r\xa9\xa7m\x05\n\t\xa6\n\t\x86\n\t^\n\t\x03\x02\n\tn\xad\r\xa9\xa7\x8d\x05\x03\n\t\xa6\n\t\x96\n\t\x8a\n\tim\x00b\xad\x00\x99\xad\xa9\xa7\x8d\x05\xac\n\t\xa1\n\t\x17;\t\x01A\t\x8d\x8f\xa9\xa8\x05\x87\x00\x8c\x91\x00b\xad\x00\x99\xad\xa5\xa8\xa9\x7f\x05\x91\x00c\xad\r\xa2\x00\x99\n\t\x03\x02\xad\x00\x92\t\x7f\x00\tm\x00c\xad\x01v\x06\x89\r\xa9\xa7\x91\x05\n\t\xa6\n\t\x86\n\t^\n\t\x03t\x02\n\tn\xad\r\x8f\xa9\xa8\x01\xaa\x01p\x01\x8f\x0b\x84\x04\n\t\xac\n\t\xaa\n\tG\x01\xa8\x05\xaa\x00:\xad\xa9l\x05\xaa\x00l\xad\r\x06\x89\t\xaa\x008\x04l\x04\n\t\xac\n\t\xa4\n\t\x82|\t\xa9\x84\t\x1d\r\xa9\x98\x05\x9a\xaa\x00\xa0\x01S\x84\x05S\r\xa0\x07\x02\xa0\x01\x07\x02\xa5\xa8\xa9\xa3\xadw\x04\xac\n\t\xa4\n\t\x82\x9a\x98\x9e\x07\x02\xa9\x98\x05\x98\x00[\xad\r\xaa\x00Z\r\xa5\xa8\x04\n\t\xac\n\t\xaa\n\tL\x8f\x84\xaa\x00!\xad\xa9\x9f\x05\x9a\xaa\x002\xad\xa5\xa3\x01\xa3\r\xa6\n\t\x96\n\t\"\n\t\x03\xa2\x00\x99\xad\x00\x1a\xad\r\xa5\x9f\r\x9a\xaa\x004\xad\n\t\xac\n\t\xaa\n\tI\n\t\x14\n\t\xac\n\t\xaa\n\tI\n\tJ\x07\x02\x9a\xaa\x006\xad\xa9\xa0\x05\x9a\x98\r\xa5\xa3\x85\x00k\x9ad\x00\x1e\xad\x005\x00e\xad\r\n\t\xac\n\t\xa4\n\t\x19\n\t1\n\t\xac\n\t\xa4\n\tH\n\tW\n\t\xac\n\t\xa4\n\t\x0f\n\tW\x00g\xad\r\xa9\x9e\t\n\t\xac\n\t\xa4\n\t\x0e\x05\x00/\xad\r\\\n\t\xac\n\t\x95\r\xa9\xa7X\t\x04\xa7\n\t\xac\n\t\xa4\n\tH\x05P\x05X\x00,\xad\rP\x00<\xad\rJ\n\t*\\\n\t\xac\n\t\x95\r\xa9\xa7a\x05\xac\n\tK\n\tB\x05\x04\xa7a\ra\x00-\xad";
pub const IDENT_SIZE: usize = 159;
static NAMES: &[&str] = &[
    "AlwaysArray",
    "ArrayWriter",
    "BytesWriter",
    "Decoder",
    "Field",
    "FromBinary",
    "Object",
    "ObjectSchemaInner",
    "Result",
    "SkipFieldVisitor",
    "UnsafeReturn",
    "ValueWriter",
    "as_mut",
    "binary",
    "bitset",
    "bool",
    "byte",
    "defaults",
    "destination",
    "discard_remaining_object_fields",
    "drop_in_place",
    "drops",
    "emplace_json_for_with_attribute",
    "enter_object",
    "enter_seen_object",
    "erased_drop_in_place",
    "erased_emplace_from_json",
    "fields",
    "from",
    "in",
    "inner_writer",
    "into_string",
    "iter",
    "join_array_with_next_value",
    "name",
    "new",
    "object_step",
    "offset",
    "peek",
    "push_unchecked_ascii",
    "read_seen_string_unescaped",
    "required",
    "restore_for_retry",
    "result",
    "skip_value",
    "skipped_field",
    "smart_object_comma",
    "start_json_array",
    "static",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "visitor",
    "with_capacity",
    "AlwaysObject",
    "AlwaysString",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "MISSING_CONTENT_TAG",
    "ObjectWriter",
    "Peek",
    "String",
    "TextWriter",
    "UNKNOWN_VARIANT",
    "Vistor",
    "binary_decode",
    "binary_encode",
    "builder",
    "byte_add",
    "emplace_from_json",
    "is_at_content",
    "join_object_with_next_value",
    "json_decode",
    "key",
    "non_terminating",
    "object_writer",
    "push_colon",
    "report_error",
    "to_string",
    "use",
    "FromJson",
    "MaybeUninit",
    "Parser",
    "ToBinary",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "decoder",
    "end_json_array",
    "impl",
    "join_parent_json_value_with_next",
    "new_field_visitor",
    "new_unchecked",
    "offset_of",
    "push",
    "snapshot",
    "temp_flatten",
    "uninit",
    "Kind",
    "None",
    "PhantomData",
    "Self",
    "Some",
    "__TEMP",
    "__schema_inner",
    "break",
    "else",
    "for",
    "inner",
    "json_encode",
    "marker",
    "message",
    "phantom",
    "push_comma",
    "temp2",
    "type",
    "where",
    "DecodeError",
    "ObjectSchema",
    "at_content",
    "encoder",
    "mem",
    "schema",
    "start_json_object",
    "success",
    "NonNull",
    "_err",
    "decode",
    "flatten_visitor",
    "fn",
    "if",
    "push_str",
    "temp",
    "write",
    "const",
    "end_json_object",
    "ToJson",
    "ptr",
    "unsafe",
    "variant",
    "cast",
    "match",
    "self",
    "as",
    "json_encode__jsony",
    "_",
    "err",
    "value",
    "__internal",
    "dst",
    "Ok",
    "json",
    "return",
    "std",
    "mut",
    "Err",
    "let",
    "parser",
    "out",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 14;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new('.', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('\'', Spacing::Joint),
        Punct::new('=', Spacing::Joint),
        Punct::new('-', Spacing::Joint),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new('|', Spacing::Alone),
        Punct::new(';', Spacing::Alone),
    ]
}
