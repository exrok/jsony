use proc_macro::{Punct, Spacing};
pub static BLIT_SRC: &[u8] =
b"\xa5\x03\x07\n\t\x02\xa4\x02\x01\xc0\xb5\t\xa2\x04w\r\xc0\xb5\t\xa2\x04\x03\xc9\n\t\xd6\n\t\x90\x02\n\t\xb5\r\xb8e\xaf\t\x05\xce\n\t%\n\t\x16\x03\x07\x0b\x02\xa0\xa9^\x04\r\xc4\xb8\x87\xcb\t\n\t\xcd\n\t\xbd\n\t\xab\x03\xd7\x02\x01\xd2\t\x05\n\t\xd2\n\t{\x03\x07\x0b\x02\xa0\n\t^\xc4\xb8\x84\xcb\t\n\t\xcd\n\t\xbd\n\t\xab\x03\xd7\x02\x01\xd2\t\x05\xce\x0b\x02\n\t\xcd\n\tJ\n\t[\x03\xd7\x01\x05\x07v\n\t\xd6\n\t\xc7\n\tx\x02\xc4\xa5\n\t\x95\xa4\t\x95\x01\xb8i\x05\xc8\x01\xbb\t\x05\xce\n\t\xd6\n\t\x15\n\t\xba\xa4\n\t\xba\x01\xa9\x92\x04\n\t\xba\x02\n\t\x92\r\xb8\xc1\x05\xc8\x01\xd3\t\x05\xce\xd6\n\t]\x0b\x02\xa0\n\t\x92\n\t\x95\x02\n\ti\n\te\xc3\xaa\x10\x04y\n\t\x83\xd7\n\t\x90\x03\x07\n\t\xc5\n\t.\n\t\x03\x05\xce\n\t\xd6\n\t\xd2\n\t{\x03\x07\x01\xbf\x02\n\tf\n\t\xc5\n\t2\n\t\x03\x07\x02\xd7\n\t\xc5\n\t\x18>\t\x01@\t\n\t\xcd\n\t\xb9\n\t\xa6\x08\x01\x98\t\n\t\xd6\n\t\xc5\n\t1\n\t\x03\n\t\xd6\n\t\xc5\n\t*\n\t\x03\x0c\xbd\t\n\t\xcd\n\t\xbd\n\t\xab\x03\xd7\x02\x0c\xd5\xcc\t\xbd\x00\xc6\xd7\x00\xbe\n\t\xd6\n\t\xc5\n\t \n\t\xd6\n\t\xc5\n\t\x1e3\t\x05\x01-\t\x05\x01+\t\x05\xc9\n\t\xd6\n\t\x91\x03\x07\x02\x02\n\t\x84\x00\x81\xd3\x00\xb6\n\t\x99\xc9\n\t\xd6\n\t\xba\x02\n\t\xc1\x05\xc8\x00\xd3\x00L\xd7\r\xd3\x00\xb1\xd7\xd3\x00\x85\xd7\xd3\x00\xb1\xd7\r\xc3\x08n\x01\xcc\x00;\xd7\xd5\xbf\t\n\t\xd6\n\t\xc7\n\tU\x04n\x00\xc1\r\xd3\x00t\xd7\r\xcc\x00\xc1\r\xd3\x00\xb1\xd7\r\xd3\x00\x86\xd7\r\xd5\xbf\t\n\t\xd6\n\t\xc7\n\tT\x04\xd3\x00m\xd7\r\xd5a\x04\x0c\x0c\x0b\x02\ra\xd7\xd3\x00\xa8\xd7\r\xd3\x00\xb7\xd7\xc0\xc4\xb8}\x03\x07\x02\xd7\x0b\x02\n\t\xd6\n\t\xc5\n\t\x9f\x03\x07\n\t\xd6\n\t\xc5\n\t\x9f\n\t\x03\x07\x9a\t\x05\xc0\x01\x9c\t\n\t\xcd\n\t\x9b\n\t\x94\xd5\xce_\x04\x03\xc9\n\t\xd6\n\t\xc7\n\tW\x02\n\t\x87\xcb\x00\x81\x01\xd2\x01\xd5`\x04}\n\t\x03\x07\xcb\x01\xd2\x01\x05\xce_\r\xc3\xd5\xd4\x04`\xd1\xd4\x00\xc6\n\t\x03\x02\xd7\x00\xbe\xd6\n\t\xc5\n\tV,\t\xcb\x01\xa7\t}\n\t\x03\x07\x02\xd7\x01\"\t\x05\x01&\t\x01H\t\xd6\n\t\xc5\n\tV\x03\x07\xca\xc8\x06\x02\xd3\x00\xb7\xd7\r\xa0\n\t\x92\xd8\xa9\x96\r\xd5\xa7\x04\n\t\xd6\n\t\xc5\n\t\x9f\x9a\t\xc0\x01\x9c\t\n\t\xcd\n\t\x9b\n\t\x94\x01\r\xd5\xce\xb3\x04\n\t\xcd\n\t\xb9\n\tz\n\t\x03\x96\x02\n\t\x8e\xd7\r\xd5\xce\x8d\x04\n\t\xcd\n\t\xb9\n\tz\n\t\x03\x02\n\t\x8e\xd7\r\xd5\xcek\x04\x03\n\t\xcd\n\t\xbd\n\t\xab\n\t\x88\x8d\x00\x7f\xd7\x00\xc6\xd7\x04\xa7\x00\xb3\x00\x7f\xd7\x00\xc6\xd7\x01\xd2\x01\xa1\x05\xcek\xd5\x9e\x04\xb3\x00\x80\xd7\r\xcb\x00\xc6\n\t\x03\t\x9e\x00\t\x8d\x00\x80\xd7\x01\x97\x07\xb2\r\xd5\xce\xb3\x04\n\t\xcd\n\t\xb9\n\tz\n\t\x03\x96\x02\n\t\x8e\xd7\r\xc3\xd5\xd4\x01\xd2\x01\x93\x01\xd5j\x04\xc4\x05\x0f\xc2\xc9\x0f\xc0\x9d\r\xd5\x89\x04\xca\x03\xc9\n\t\xd6\n\tP\n\t\x1a\x02\n\t7\x05\xce\xd2\x00$\x00)\x01j\x06\x02\xcc\x01\xd4\x06\x02\xd1\xd4\xc3\x08\xad\x05\n\t\xd6\n\t\xbc\n\tX\x04\xd2\x00\x8b\xd7\xca\xd2\x00O\xd7\xd5\xcc\x04\xca\xc2\xbf\x06\x02\xc3\xad\t\x89\xca\xd2\x00r\xd7\x05\xd6\n\t\xbc\n\t\x1c\x01\xcf\xc2\x04p\r(\r\xd5\xc2\x04\xc2\x00R\xd7\r\xd2\x00u\r\xd1\xd4\x05\n\t\xd6\n\t\xbc\n\t\x1f\xd5\x8c\x04\xd2\x00\x8c\xd7\r\x07\xb2\t\xd2\x00I\x05\x8c\x05\n\t\xd6\n\t\xc7\n\txo\t\xd5\xad\t\xa2\r\xd5\xc2\x04\xca\xd2\x00\xcc\x01l\xad\x04l\r\xcc\xd5\xcf\xd7\xa3\x05\n\t\xd6\n\t\xbc\n\t\x17\x07\xb2\t=\xd2\x00g\xd7\xca\xd2\x00g\xd7\x06\x02\xd1\xcf\x01\xd0\x06\x02\xcd\n\t\xbd\n\th\n\t\x03\xcb\x00\xc6\xd7\x00b\xd7\r\xd1\xd0\xd5\xd0\x04\xca\xd2\x00r\xd7\x05\xd6\n\t\xbc\n\t\x1b\r\xcd\n\t\xbd\n\th\n\t\x03\r\xd1\xd0\r\xca\xd2\x00A\xd7\n\t\xd6\n\t\xd2\n\tZ\n\t\x1d\n\t\xd6\n\t\xd2\n\tZ\n\t\\\x06\x02\xca\xc4\xd2\x00G\xd7\r\xd1\xcf\x05\xd6\n\t\xc7\n\tx\x8f\n\t\xcd\n\t\xb9\n\t\x8a\x01\xa6\rc\x08\xc9\xd6\n\t\x8a\n\t\x03\x02\xd7\x06\x04\xbb\x00D\xaf\x00B\xd7\n\t\x91\x02\n\t\x84\xbb\x00\xb0\xd5\xaa\x04\xaf\x00d\xd7\r\xc3\xaa\x02\x12\x0c\xaa\x03\xaf\x00u4\x08\x01\xaa\x01\xb4\xd9C\xb8Q\x0b\x02\x05\x07v\x9d\n\t\xcd\n\t\x9d\n\t\x19\xa4\xa9\xd4\x04\n\t\xd6\n\t\xbc\n\t|\r\xb86\xcc\t\x05\x9d\x0b\x02[\x03\xa0\x01\n\t\xd6\n\t\xbc\n\t|\x02\xca\xcc\xbf\x06\x02\xd1\xd4\xca\xaf\x00d\xd7\'\n\tF\xc0\xbf\t\xd7\x04\x00E\x00\x85\xd7\r\n\t\xd6\n\t\xc7\n\t!\n\t?\n\t\xd6\n\t\xc7\n\tY\n\tq\n\t\xd6\n\t\xc7\n\t\x14\n\tq\x00\x86\xd7\r\xd5\xbf\t\n\t\xd6\n\t\xc7\n\t\x13\x04\x00<\xd7\r\x8f\n\t\xd6\n\t\xba\r\xd5\xces\t\x05\xce\n\t\xd6\n\t\xc7\n\tY\x04\x04s\x009\xd7\r\x00K\xd7\r\\\n\t5\x8f\n\t\xd6\n\t\xba\r\xd5\xce~\x04\xd6\n\t]\n\tS\x04\x05\xce~\r~\x00:\xd7";
pub const IDENT_SIZE: usize = 196;
pub static NAMES: [&str; 196] = [
    "AlwaysArray",
    "ArrayWriter",
    "BytesWriter",
    "Decoder",
    "EMPTY_OBJECT_FOR_EXTERNALLY_TAGGED_ENUM",
    "Field",
    "FromStr",
    "FromText",
    "MULTIPLE_FIELDS_FOR_EXTERNALLY_TAGGED_ENUM",
    "NO_FIELD_MATCHED_AN_ENUM_VARIANT",
    "Object",
    "ObjectSchemaInner",
    "UNKNOWN_VARIANT",
    "UnsafeReturn",
    "ValueWriter",
    "alias",
    "allow",
    "at",
    "binary",
    "bitset",
    "clippy",
    "continue",
    "ctx",
    "default_default",
    "defaults",
    "destination",
    "drops",
    "emplace_json_for_with_attribute",
    "enter_object",
    "enter_seen_object",
    "erased_drop_in_place",
    "erased_emplace_from_json",
    "fields",
    "format_args",
    "from",
    "from_str",
    "from_text",
    "in",
    "inner_writer",
    "into_string",
    "iter",
    "join_array_with_next_value",
    "loop",
    "name",
    "new",
    "offset",
    "peek",
    "pod_type",
    "pub",
    "push_as_bytes",
    "push_unchecked_ascii",
    "question_mark",
    "read_seen_string",
    "required",
    "restore_for_retry",
    "result",
    "smart_object_comma",
    "start_json_array",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "take_string",
    "text",
    "to_str",
    "to_string",
    "with_capacity",
    "AlwaysObject",
    "AlwaysString",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "MISSING_CONTENT_TAG",
    "ObjectWriter",
    "Peek",
    "Result",
    "String",
    "TextWriter",
    "Visitor",
    "__flatten_visitor_jsony",
    "__result",
    "__scope_jsony",
    "as_mut",
    "assert",
    "byte",
    "decode_binary",
    "decode_json",
    "discard_remaining_object_fields",
    "drop_in_place",
    "encode_binary",
    "erased",
    "flatten_visitor",
    "is_at_content",
    "join_object_with_next_value",
    "key",
    "message",
    "next_field",
    "non_terminating",
    "object_step",
    "object_writer",
    "push_colon",
    "report_error",
    "static",
    "true",
    "DecodeError",
    "Default",
    "MaybeUninit",
    "Parser",
    "UnknownVariant",
    "__schema_inner",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "byte_add",
    "decode_with_alias",
    "default",
    "emplace_from_json",
    "end_json_array",
    "join_parent_json_value_with_next",
    "new_field_visitor",
    "new_unchecked",
    "other_tag",
    "size_of",
    "skip_value",
    "snapshot",
    "temp_flatten",
    "uninit",
    "use",
    "FromBinary",
    "FromJson",
    "Kind",
    "None",
    "PhantomData",
    "ToBinary",
    "__TEMP",
    "break",
    "decode",
    "encode_json",
    "inner",
    "marker",
    "phantom",
    "str",
    "temp2",
    "ObjectSchema",
    "Self",
    "Some",
    "bool",
    "else",
    "for",
    "impl",
    "offset_of",
    "schema",
    "start_json_object",
    "type",
    "version",
    "NonNull",
    "_err",
    "at_content",
    "automatically_derived",
    "decoder",
    "push",
    "push_comma",
    "success",
    "temp",
    "where",
    "POD",
    "push_str",
    "end_json_object",
    "fn",
    "mem",
    "ToJson",
    "encoder",
    "error",
    "ptr",
    "write",
    "_",
    "const",
    "encode_json__jsony",
    "variant",
    "if",
    "unsafe",
    "__internal",
    "cast",
    "json",
    "self",
    "as",
    "match",
    "dst",
    "value",
    "std",
    "mut",
    "Ok",
    "err",
    "return",
    "parser",
    "out",
    "Err",
    "let",
    "jsony",
];
pub const PUNCT_SIZE: usize = 19;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new('.', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Joint),
        Punct::new('\'', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('-', Spacing::Joint),
        Punct::new('|', Spacing::Alone),
        Punct::new(';', Spacing::Alone),
        Punct::new('#', Spacing::Joint),
        Punct::new('*', Spacing::Alone),
        Punct::new('>', Spacing::Joint),
        Punct::new('+', Spacing::Alone),
        Punct::new('|', Spacing::Joint),
    ]
}
