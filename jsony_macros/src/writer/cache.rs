use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"\xa1\x03\x07\n\t\x01\xa0\x01\x02\xb2d\x80\t\x04\xc5\n\t#\n\t\x13\x03\x07\x0c\x01\x9d\xa4_\x05\x00\xb7\xb2\x84\xc2\t\n\t\xc3\n\t\xb4\n\t\xa5\x03\xcd\x01\x02\xc8\t\x04\n\t\xc8\n\ty\x03\x07\x0c\x01\x9d\n\t_\xb7\xb2\x81\xc2\t\n\t\xc3\n\t\xb4\n\t\xa5\x03\xcd\x01\x02\xc8\t\x04\xc5\x0c\x01\n\t\xc3\n\tH\n\t\\\x03\xcd\x02\x04\x07u\n\t\xcc\n\t\xbe\n\tw\x01\xb7\xa1\n\tz\xa0\tz\x02\xb2i\x04\xbf\x02\x9f\t\x04\xc5\n\t\xcc\n\t\x12\n\t\xb3\xa0\n\t\xb3\x02\xa4\x8e\x05\n\t\xb3\x01\n\t\x8e\x00\xb2\xb9\x04\xbf\x02\xc9\t\x04\xc5\xcc\n\t^\x0c\x01\x9d\n\t\x8e\n\tz\x01\n\ti\n\td\n\t\x16\x03\x07\n\t\xbc\n\t/\n\t\x03\x04\xc5\n\t\xcc\n\t\xc8\n\ty\x03\x07\x02\xb8\x01\n\te\n\t\xbc\n\t3\n\t\x03\x07\x01\xcd\n\t\xbc\n\t\x15>\t\x02@\t\n\t\xc3\n\t\xaa\n\t\x99\x0b\x02\x93\t\n\t\xcc\n\t\xbc\n\t2\n\t\x03\n\t\xcc\n\t\xbc\n\t+\n\t\x03\x0e\xb4\t\n\t\xc3\n\t\xb4\n\t\xa5\x03\xcd\x01\x0e\xcb\xc0\t\xb4\r\xbd\xcd\r\xb5\n\t\xcc\n\t\xbc\n\t\x1f\n\t\xcc\n\t\xbc\n\t\x1c4\t\x04\x02.\t\x04\x02,\t\x04\xbb\n\t\xcc\n\t\x8d\x03\x07\x01\x01\n\t\x81\r\x7f\xc9\r\xaf\n\t\x95\xbb\n\t\xcc\n\t\xb3\x01\n\t\xb9\x04\xbf\r\xc9\rK\xcd\x00\xc9\r\xab\xcd\xc9\r\x82\xcd\xc9\r\xab\xcd\x00\xb6\x0bm\x02\xc0\r;\xcd\xcb\xb8\t\n\t\xcc\n\t\xbe\n\tU\x05m\r\xb9\x00\xc9\rt\xcd\x00\xc0\r\xb9\x00\xc9\r\xab\xcd\x00\xc9\r\x83\xcd\x00\xcb\xb8\t\n\t\xcc\n\t\xbe\n\tT\x05\xc9\rl\xcd\x00\xcbb\x05\x0e\x0e\x0c\x01V\n\tf\xcd\x00b\xcd\xc9\r\xa3\xcd\x00\xc9\r\xb1\xcd\xb0\xb7\xb2{\x03\x07\x01\xcd\x08\x01\n\t\xcc\n\t\xbc\n\t\x9c\x03\x07\n\t\xcc\n\t\xbc\n\t\x9c\n\t\x03\x07\x97\t\x04\xb0\x02\x9a\t\n\t\xc3\n\t\x98\n\t\x90\xcb\xc5`\x05\x03\xbb\n\t\xcc\n\t\xbe\n\tX\x01\n\t\x84\xc2\r\x7f\x02\xc8\x02\xcba\x05{\n\t\x03\x07\xc2\x02\xc8\x02\x04\xc5`\x00\xb6\xcb\xca\x05a\xc7\xca\r\xbd\n\t\x03\x01\xcd\r\xb5\xcc\n\t\xbc\n\tW-\t\xc2\x02\xa2\t{\n\t\x03\x07\x01\xcd\x02$\t\x02F\t\xcc\n\t\xbc\n\tW\x03\x07\xc1\xbf\x06\x01\xc9\r\xb1\xcd\x00\x9d\n\t\x8e\xce\xa4\x91\x00\xcb\xa2\x05\n\t\xcc\n\t\xbc\n\t\x9c\x97\t\xb0\x02\x9a\t\n\t\xc3\n\t\x98\n\t\x90\x02\x00\xcb\xc5\xad\x05\n\t\xc3\n\t\xaa\n\tx\n\t\x03\x91\x01\n\t\x8c\xcd\x00\xcb\xc5\x8b\x05\n\t\xc3\n\t\xaa\n\tx\n\t\x03\x01\n\t\x8c\xcd\x00\xcb\xc5\x96\x05\x03\n\t\xc3\n\t\xb4\n\t\xa5\n\t\x85\x8b\r}\xcd\r\xbd\xcd\xcb\xc5\x96\x05\xcc\n\t\xbc\n\t\x1dI\t\x02R\t\x96\x05\xa2\r\x93\xad\r}\xcd\r\xbd\xcd\x02\xc8\x02\x9e\x04\xc5\x96\xcb\x9b\x05\xad\r~\xcd\x00\xc2\r\xbd\n\t\x03\t\x9b\r\t\x8b\r~\xcd\x02\x92\x07\xac\x00\xcb\xc5\xad\x05\n\t\xc3\n\t\xaa\n\tx\n\t\x03\x91\x01\n\t\x8c\xcd\x00\xb6\xcb\xca\x02\xc8\x02\x8f\x02\xcbj\x05\xb7\x04\x0f\xba\xbb\x0f\xb0\x8a\x00\xcb\x86\x05\xc1\x03\xbb\n\t\xcc\n\tO\n\t\x18\x01\n\t7\x04\xc5\xc8\r\"\r)\x02j\x06\x01\xc0\x02\xca\x06\x01\xc7\xca\xb6\x0b\xa7\x04\n\t\xcc\n\t\xa9\n\tY\x05\xc8\r\x88\xcd\xc1\xc8\rN\xcd\xcb\xc0\x05\xc1\xba\xb8\x06\x01\xb6\xa7\t\x86\xc1\xc8\rq\xcd\x04\xcc\n\t\xa9\n\t\x1a\x02\xc4\xba\x05o\x00(\x00\xcb\xba\x05\xba\rQ\xcd\x00\xc8\rE\x00\xc7\xca\x04\n\t\xcc\n\t\xa9\n\t\x1e\xcb\x89\x05\xc8\r\x89\xcd\x00\x07\xac\t\xc8\rG\x04\x89\x04\n\t\xcc\n\t\xbe\n\twn\t\xcb\xa7\t%\x00\xcb\xba\x05\xc1\xc8\r\xc0\x02k\xa7\x05k\x00\xc0\xcb\xc4\xcd\x94\x04\n\t\xcc\n\t\xa9\n\t\x14\x07\xac\t=\xc8\rg\xcd\xc1\xc8\rg\xcd\x06\x01\xc7\xc4\x02\xc6\x06\x01\xc3\n\t\xb4\n\th\n\t\x03\xc2\r\xbd\xcd\rc\xcd\x00\xc7\xc6\xcb\xc6\x05\xc1\xc8\rq\xcd\x04\xcc\n\t\xa9\n\t\x19\x00\xc3\n\t\xb4\n\th\n\t\x03\x00\xc7\xc6\x00\xc1\xc8\rA\xcd\n\t\xcc\n\t\xc8\n\t[\n\t\x1b\n\t\xcc\n\t\xc8\n\t[\n\t]\x06\x01\xc1\xb7\xc8\rD\xcd\x00\xc7\xc4\x04\xcc\n\t\xbe\n\tw\n\t\x8d\x01\n\t\x81\xae\xcfs\xb2P\x0c\x01\x04\x07u\x8a\n\t\xc3\n\t\x8a\n\t\x17\xa0\xa4\xca\x05\xcd\x00s\xb26\x0c\x01\\\x03\x9d\x02\xcd\x01\xb8\x06\x01\xc7\xca\x9f\r\x87\xc1\x80\r&\xcd\'\n\tC\xb0\xb8\t\xcd\x05\rB\r\x82\xcd\x00\n\t\xcc\n\t\xbe\n\t \n\t?\n\t\xcc\n\t\xbe\n\tZ\n\tp\n\t\xcc\n\t\xbe\n\t\x11\n\tp\r\x83\xcd\x00\xcb\xb8\t\n\t\xcc\n\t\xbe\n\t\x10\x05\r<\xcd\x00v\n\t\xcc\n\t\xb3\x00\xcb\xc5r\t\x04\xc5\n\t\xcc\n\t\xbe\n\tZ\x05\x05r\r9\xcd\x00\rJ\xcd\x00]\n\t5v\n\t\xcc\n\t\xb3\x00\xcb\xc5|\x05\xcc\n\t^\n\tS\x05\x04\xc5|\x00|\r:\xcd";
pub const IDENT_SIZE: usize = 189;
static NAMES: &[&str] = &[
    "AlwaysArray",
    "ArrayWriter",
    "BytesWriter",
    "Decoder",
    "EMPTY_OBJECT_FOR_EXTERNALLY_TAGGED_ENUM",
    "Field",
    "FromBinary",
    "FromStr",
    "FromText",
    "MULTIPLE_FIELDS_FOR_EXTERNALLY_TAGGED_ENUM",
    "NO_FIELD_MATCHED_AN_ENUM_VARIANT",
    "Object",
    "ObjectSchemaInner",
    "SkipFieldVisitor",
    "UNKNOWN_VARIANT",
    "UnsafeReturn",
    "ValueWriter",
    "allow",
    "at",
    "binary",
    "bitset",
    "bool",
    "byte",
    "clippy",
    "continue",
    "ctx",
    "decode_with_alias",
    "default_default",
    "defaults",
    "destination",
    "drops",
    "emplace_json_for_with_attribute",
    "enter_object",
    "enter_seen_object",
    "erased_drop_in_place",
    "erased_emplace_from_json",
    "fields",
    "from",
    "from_str",
    "from_text",
    "in",
    "inner_writer",
    "into_string",
    "iter",
    "join_array_with_next_value",
    "loop",
    "name",
    "new",
    "offset",
    "peek",
    "push_unchecked_ascii",
    "question_mark",
    "read_seen_string",
    "report_error",
    "required",
    "restore_for_retry",
    "result",
    "skipped_field",
    "smart_object_comma",
    "start_json_array",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "take_string",
    "text",
    "to_str",
    "to_string",
    "visitor",
    "with_capacity",
    "AlwaysObject",
    "AlwaysString",
    "Default",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "MISSING_CONTENT_TAG",
    "ObjectWriter",
    "Peek",
    "Result",
    "String",
    "TextWriter",
    "Visitor",
    "__flatten_visitor_jsony",
    "__result",
    "__scope_jsony",
    "as_mut",
    "decode_binary",
    "decode_json",
    "default",
    "discard_remaining_object_fields",
    "drop_in_place",
    "encode_binary",
    "erased",
    "is_at_content",
    "join_object_with_next_value",
    "key",
    "message",
    "next_field",
    "non_terminating",
    "object_step",
    "object_writer",
    "pub",
    "push_colon",
    "static",
    "use",
    "DecodeError",
    "MaybeUninit",
    "Parser",
    "ToBinary",
    "__schema_inner",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "byte_add",
    "decoder",
    "emplace_from_json",
    "end_json_array",
    "join_parent_json_value_with_next",
    "new_field_visitor",
    "new_unchecked",
    "other_tag",
    "push",
    "skip_value",
    "snapshot",
    "str",
    "temp_flatten",
    "uninit",
    "FromJson",
    "Kind",
    "None",
    "PhantomData",
    "__TEMP",
    "break",
    "decode",
    "else",
    "encode_json",
    "flatten_visitor",
    "inner",
    "marker",
    "offset_of",
    "phantom",
    "temp2",
    "ObjectSchema",
    "Self",
    "Some",
    "encoder",
    "for",
    "impl",
    "schema",
    "start_json_object",
    "type",
    "NonNull",
    "_err",
    "at_content",
    "automatically_derived",
    "error",
    "mem",
    "push_comma",
    "success",
    "temp",
    "where",
    "push_str",
    "const",
    "end_json_object",
    "fn",
    "ToJson",
    "ptr",
    "write",
    "if",
    "unsafe",
    "_",
    "encode_json__jsony",
    "variant",
    "as",
    "__internal",
    "cast",
    "json",
    "self",
    "value",
    "match",
    "dst",
    "std",
    "Ok",
    "mut",
    "err",
    "return",
    "parser",
    "out",
    "Err",
    "let",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 16;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new(';', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('=', Spacing::Joint),
        Punct::new('\'', Spacing::Joint),
        Punct::new('#', Spacing::Joint),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new('-', Spacing::Joint),
        Punct::new('.', Spacing::Alone),
        Punct::new('|', Spacing::Alone),
        Punct::new('*', Spacing::Alone),
    ]
}
