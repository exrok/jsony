use proc_macro::{Punct, Spacing};
pub static BLIT_SRC: &[u8] =
b"\xa7\x03\x07\n\t\x01\xa6\x01\x02\xc2\xb7\t\xa4\x04y\r\xc2\xb7\t\xa4\x04\x03\xcb\n\t\xd8\n\t\x91\x01\n\t\xb7\r\xbbh\xb1\t\x05\xd1\n\t%\n\t\x16\x03\x07\x0c\x01\xa2\xaba\x04\r\xc6\xbb\x88\xcd\t\n\t\xcf\n\t\xbf\n\t\xad\x03\xd9\x01\x02\xd4\t\x05\n\t\xd4\n\t}\x03\x07\x0c\x01\xa2\n\ta\xc6\xbb\x85\xcd\t\n\t\xcf\n\t\xbf\n\t\xad\x03\xd9\x01\x02\xd4\t\x05\xd1\x0c\x01\n\t\xcf\n\tK\n\t^\x03\xd9\x02\x05\x07x\n\t\xd8\n\t\xc9\n\tz\x01\xc6\xa7\n\t\x96\xa6\t\x96\x02\xbbl\x05\xca\x02\xbd\t\x05\xd1\n\t\xd8\n\t\x15\n\t\xbc\xa6\n\t\xbc\x02\xab\x93\x04\n\t\xbc\x01\n\t\x93\r\xbb\xc3\x05\xca\x02\xd5\t\x05\xd1\xd8\n\t`\x0c\x01\xa2\n\t\x93\n\t\x96\x01\n\tl\n\th\xc5\xac\x11\x04{\n\t\x84\xd9\n\t\x91\x03\x07\n\t\xc7\n\t/\n\t\x03\x05\xd1\n\t\xd8\n\t\xd4\n\t}\x03\x07\x02\xc1\x01\n\ti\n\t\xc7\n\t3\n\t\x03\x07\x01\xd9\n\t\xc7\n\t\x18?\t\x02A\t\n\t\xcf\n\t\xb8\n\t\xa8\x08\x02\x99\t\n\t\xd8\n\t\xc7\n\t2\n\t\x03\n\t\xd8\n\t\xc7\n\t+\n\t\x03\x0e\xbf\t\n\t\xcf\n\t\xbf\n\t\xad\x03\xd9\x01\x0e\xd7\xce\t\xbf\x00\xc8\xd9\x00\xc0\n\t\xd8\n\t\xc7\n\t!\n\t\xd8\n\t\xc7\n\t\x1e4\t\x05\x02.\t\x05\x02,\t\x05\xcb\n\t\xd8\n\t\x92\x03\x07\x01\x01\n\t\x85\x00\x83\xd5\x00\xb9\n\t\x9a\xcb\n\t\xd8\n\t\xbc\x01\n\t\xc3\x05\xca\x00\xd5\x00N\xd9\r\xd5\x00\xb3\xd9\xd5\x00\x86\xd9\xd5\x00\xb3\xd9\r\xc5\x08p\x02\xce\x00<\xd9\xd7\xc1\t\n\t\xd8\n\t\xc9\n\tX\x04p\x00\xc3\r\xd5\x00v\xd9\r\xce\x00\xc3\r\xd5\x00\xb3\xd9\r\xd5\x00\x87\xd9\r\xd7\xc1\t\n\t\xd8\n\t\xc9\n\tW\x04\xd5\x00o\xd9\r\xd7d\x04\x0e\x0e\x0c\x01\rd\xd9\xd5\x00\xaa\xd9\r\xd5\x00\xba\xd9\xc2\xc6\xbb\x7f\x03\x07\x01\xd9\x0b\x01\n\t\xd8\n\t\xc7\n\t\xa1\x03\x07\n\t\xd8\n\t\xc7\n\t\xa1\n\t\x03\x07\x9c\t\x05\xc2\x02\x9e\t\n\t\xcf\n\t\x9d\n\t\x95\xd7\xd1b\x04\x03\xcb\n\t\xd8\n\t\xc9\n\tZ\x01\n\t\x88\xcd\x00\x83\x02\xd4\x02\xd7c\x04\x7f\n\t\x03\x07\xcd\x02\xd4\x02\x05\xd1b\r\xc5\xd7\xd6\x04c\xd3\xd6\x00\xc8\n\t\x03\x01\xd9\x00\xc0\xd8\n\t\xc7\n\tY-\t\xcd\x02\xa9\t\x7f\n\t\x03\x07\x01\xd9\x02&\t\x02I\t\xd8\n\t\xc7\n\tY\x03\x07\xcc\xca\x06\x01\xd5\x00\xba\xd9\r\xa2\n\t\x93\xda\xab\x97\r\xd7\xa9\x04\n\t\xd8\n\t\xc7\n\t\xa1\x9c\t\xc2\x02\x9e\t\n\t\xcf\n\t\x9d\n\t\x95\x02\r\xd7\xd1\xb5\x04\n\t\xcf\n\t\xb8\n\t|\n\t\x03\x97\x01\n\t\x8f\xd9\r\xd7\xd1\x8e\x04\n\t\xcf\n\t\xb8\n\t|\n\t\x03\x01\n\t\x8f\xd9\r\xd7\xd1\x9b\x04\x03\n\t\xcf\n\t\xbf\n\t\xad\n\t\x89\x8e\x00\x81\xd9\x00\xc8\xd9\xd7\xd1\x9b\x04\xd8\n\t\xc7\n\t\x1fL\t\x02U\t\x9b\x04\xa9\x00\x99\xb5\x00\x81\xd9\x00\xc8\xd9\x02\xd4\x02\xa3\x05\xd1\x9b\xd7\xa0\x04\xb5\x00\x82\xd9\r\xcd\x00\xc8\n\t\x03\t\xa0\x00\t\x8e\x00\x82\xd9\x02\x98\x07\xb4\r\xd7\xd1\xb5\x04\n\t\xcf\n\t\xb8\n\t|\n\t\x03\x97\x01\n\t\x8f\xd9\r\xc5\xd7\xd6\x02\xd4\x02\x94\x02\xd7m\x04\xc6\x05\x0f\xc4\xcb\x0f\xc2\x9f\r\xd7\x8a\x04\xcc\x03\xcb\n\t\xd8\n\tR\n\t\x1a\x01\n\t8\x05\xd1\xd4\x00$\x00)\x02m\x06\x01\xce\x02\xd6\x06\x01\xd3\xd6\xc5\x08\xaf\x05\n\t\xd8\n\t\xbe\n\t[\x04\xd4\x00\x8c\xd9\xcc\xd4\x00Q\xd9\xd7\xce\x04\xcc\xc4\xc1\x06\x01\xc5\xaf\t\x8a\xcc\xd4\x00t\xd9\x05\xd8\n\t\xbe\n\t\x1c\x02\xd0\xc4\x04r\r(\r\xd7\xc4\x04\xc4\x00T\xd9\r\xd4\x00w\r\xd3\xd6\x05\n\t\xd8\n\t\xbe\n\t \xd7\x8d\x04\xd4\x00\x8d\xd9\r\x07\xb4\t\xd4\x00J\x05\x8d\x05\n\t\xd8\n\t\xc9\n\tzq\t\xd7\xaf\t\xa4\r\xd7\xc4\x04\xcc\xd4\x00\xce\x02n\xaf\x04n\r\xce\xd7\xd0\xd9\xa5\x05\n\t\xd8\n\t\xbe\n\t\x17\x07\xb4\t>\xd4\x00j\xd9\xcc\xd4\x00j\xd9\x06\x01\xd3\xd0\x02\xd2\x06\x01\xcf\n\t\xbf\n\tk\n\t\x03\xcd\x00\xc8\xd9\x00e\xd9\r\xd3\xd2\xd7\xd2\x04\xcc\xd4\x00t\xd9\x05\xd8\n\t\xbe\n\t\x1b\r\xcf\n\t\xbf\n\tk\n\t\x03\r\xd3\xd2\r\xcc\xd4\x00B\xd9\n\t\xd8\n\t\xd4\n\t]\n\t\x1d\n\t\xd8\n\t\xd4\n\t]\n\t_\x06\x01\xcc\xc6\xd4\x00H\xd9\r\xd3\xd0\x05\xd8\n\t\xc9\n\tz\x90\n\t\xcf\n\t\xb8\n\t\x8b\x02\xa8\rf\x08\xcb\xd8\n\t\x8b\n\t\x03\x01\xd9\x06\x04\xbd\x00E\xb1\x00C\xd9\n\t\x92\x01\n\t\x85\xbd\x00\xb2\xd7\xac\x04\xb1\x00g\xd9\r\xc5\xac\x01\x12\x0e\xac\x03\xb1\x00w5\x08\x02\xac\x02\xb6\xdbD\xbbS\x0c\x01\x05\x07x\x9f\n\t\xcf\n\t\x9f\n\t\x19\xa6\xab\xd6\x04\n\t\xd8\n\t\xbe\n\t~\r\xbb7\xce\t\x05\x9f\x0c\x01^\x03\xa2\x02\n\t\xd8\n\t\xbe\n\t~\x01\xcc\xce\xc1\x06\x01\xd3\xd6\xcc\xb1\x00g\xd9\'\n\tG\xc2\xc1\t\xd9\x04\x00F\x00\x86\xd9\r\n\t\xd8\n\t\xc9\n\t\"\n\t@\n\t\xd8\n\t\xc9\n\t\\\n\ts\n\t\xd8\n\t\xc9\n\t\x14\n\ts\x00\x87\xd9\r\xd7\xc1\t\n\t\xd8\n\t\xc9\n\t\x13\x04\x00=\xd9\r\x90\n\t\xd8\n\t\xbc\r\xd7\xd1u\t\x05\xd1\n\t\xd8\n\t\xc9\n\t\\\x04\x04u\x00:\xd9\r\x00M\xd9\r_\n\t6\x90\n\t\xd8\n\t\xbc\r\xd7\xd1\x80\x04\xd8\n\t`\n\tV\x04\x05\xd1\x80\r\x80\x00;\xd9";
pub const IDENT_SIZE: usize = 198;
pub static NAMES: [&str; 198] = [
    "AlwaysArray",
    "ArrayWriter",
    "BytesWriter",
    "Decoder",
    "EMPTY_OBJECT_FOR_EXTERNALLY_TAGGED_ENUM",
    "Field",
    "FromStr",
    "FromText",
    "MULTIPLE_FIELDS_FOR_EXTERNALLY_TAGGED_ENUM",
    "NO_FIELD_MATCHED_AN_ENUM_VARIANT",
    "Object",
    "ObjectSchemaInner",
    "SkipFieldVisitor",
    "UNKNOWN_VARIANT",
    "UnsafeReturn",
    "ValueWriter",
    "allow",
    "at",
    "binary",
    "bitset",
    "clippy",
    "continue",
    "ctx",
    "decode_with_alias",
    "default_default",
    "defaults",
    "destination",
    "drops",
    "emplace_json_for_with_attribute",
    "enter_object",
    "enter_seen_object",
    "erased_drop_in_place",
    "erased_emplace_from_json",
    "fields",
    "format_args",
    "from",
    "from_str",
    "from_text",
    "in",
    "inner_writer",
    "into_string",
    "iter",
    "join_array_with_next_value",
    "loop",
    "name",
    "new",
    "offset",
    "peek",
    "pod_type",
    "pub",
    "push_as_bytes",
    "push_unchecked_ascii",
    "question_mark",
    "read_seen_string",
    "required",
    "restore_for_retry",
    "result",
    "skipped_field",
    "smart_object_comma",
    "start_json_array",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "take_string",
    "text",
    "to_str",
    "to_string",
    "visitor",
    "with_capacity",
    "AlwaysObject",
    "AlwaysString",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "MISSING_CONTENT_TAG",
    "ObjectWriter",
    "Peek",
    "Result",
    "String",
    "TextWriter",
    "Visitor",
    "__flatten_visitor_jsony",
    "__result",
    "__scope_jsony",
    "as_mut",
    "assert",
    "byte",
    "decode_binary",
    "decode_json",
    "discard_remaining_object_fields",
    "drop_in_place",
    "encode_binary",
    "erased",
    "is_at_content",
    "join_object_with_next_value",
    "key",
    "message",
    "next_field",
    "non_terminating",
    "object_step",
    "object_writer",
    "push_colon",
    "report_error",
    "static",
    "true",
    "DecodeError",
    "Default",
    "MaybeUninit",
    "Parser",
    "UnknownVariant",
    "__schema_inner",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "byte_add",
    "default",
    "emplace_from_json",
    "end_json_array",
    "join_parent_json_value_with_next",
    "new_field_visitor",
    "new_unchecked",
    "other_tag",
    "size_of",
    "skip_value",
    "snapshot",
    "temp_flatten",
    "uninit",
    "use",
    "FromBinary",
    "FromJson",
    "Kind",
    "None",
    "PhantomData",
    "ToBinary",
    "__TEMP",
    "break",
    "decode",
    "encode_json",
    "flatten_visitor",
    "inner",
    "marker",
    "phantom",
    "str",
    "temp2",
    "ObjectSchema",
    "Self",
    "Some",
    "bool",
    "else",
    "for",
    "impl",
    "offset_of",
    "schema",
    "start_json_object",
    "type",
    "version",
    "NonNull",
    "_err",
    "at_content",
    "automatically_derived",
    "decoder",
    "push",
    "push_comma",
    "success",
    "temp",
    "where",
    "POD",
    "mem",
    "push_str",
    "end_json_object",
    "fn",
    "ToJson",
    "encoder",
    "error",
    "ptr",
    "write",
    "_",
    "const",
    "encode_json__jsony",
    "variant",
    "if",
    "unsafe",
    "__internal",
    "cast",
    "json",
    "self",
    "as",
    "match",
    "dst",
    "value",
    "std",
    "Ok",
    "mut",
    "err",
    "return",
    "parser",
    "out",
    "Err",
    "let",
    "jsony",
];
pub const PUNCT_SIZE: usize = 19;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new('.', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Joint),
        Punct::new('\'', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('#', Spacing::Joint),
        Punct::new('-', Spacing::Joint),
        Punct::new(';', Spacing::Alone),
        Punct::new('|', Spacing::Alone),
        Punct::new('*', Spacing::Alone),
        Punct::new('+', Spacing::Alone),
        Punct::new('>', Spacing::Joint),
        Punct::new('|', Spacing::Joint),
    ]
}
