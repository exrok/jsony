use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"\x80\x03\x07\n\t\x02\x96\x02\x01\xa7c}\t\x05\xc1\n\t#\n\t\x13\x03\x07\x0e\x02\x8e\x9c^\x04\x00\xb4\xa7\x82\xbe\t\n\t\xbf\n\t\xb0\n\t\xa3\x03\xc9\x02\x01\xc4\t\x05\n\t\xc4\n\tv\x03\x07\x0e\x02\x8e\n\t^\xb4\xa7~\xbe\t\n\t\xbf\n\t\xb0\n\t\xa3\x03\xc9\x02\x01\xc4\t\x05\xc1\x0e\x02\n\t\xbf\n\tG\n\t\x1c\x03\xc9\x01\x05\x07K\n\t\xc8\n\t\xbb\n\tt\x02\xb4\x80\n\tw\x96\tw\x01\xa7h\x05\xb6\x01\xa0\t\x05\xc1\n\t\xc8\n\t\x12\n\t\xaf\x96\n\t\xaf\x01\x9c\x8b\x04\n\t\xaf\x02\n\t\x8b\x00\xa7\xb5\x05\xb6\x01\xc6\t\x05\xc1\xc8\n\t]\x0e\x02\x8e\n\t\x8b\n\tw\x02\n\th\n\tc\n\t\x16\x03\x07\n\t\xb9\n\t/\n\t\x03\x05\xc1\n\t\xc8\n\t\xc4\n\tv\x03\x07\x01\xb2\x02\n\td\n\t\xb9\n\t3\n\t\x03\x07\x02\xc9\n\t\xb9\n\t\x15=\t\x01?\t\n\t\xbf\n\t\xa8\n\t\x99\x08\x01\x92\t\n\t\xc8\n\t\xb9\n\t2\n\t\x03\n\t\xc8\n\t\xb9\n\t+\n\t\x03\x0b\xb0\t\n\t\xbf\n\t\xb0\n\t\xa3\x03\xc9\x02\x0b\xc7\xbd\t\xb0\r\xba\xc9\r\xb1\n\t\xc8\n\t\xb9\n\t\x1f\n\t\xc8\n\t\xb9\n\t\x1b4\t\x05\x01.\t\x05\x01,\t\x05\xb8\n\t\xc8\n\t\x8a\x03\x07\x02\x02\n\t~\r|\xc6\r\xac\n\t\x94\xb8\n\t\xc8\n\t\xaf\x02\n\t\xb5\x05\xb6\r\xc6\rJ\xc9\x00\xc6\r\xa9\xc9\xc6\r\x7f\xc9\xc6\r\xa9\xc9\x00\xb3\x08l\x01\xbd\r:\xc9\xc7\xb2\t\n\t\xc8\n\t\xbb\n\tU\x04l\r\xb5\x00\xc6\rr\xc9\x00\xbd\r\xb5\x00\xc6\r\xa9\xc9\x00\xc6\r\x81\xc9\x00\xc7\xb2\t\n\t\xc8\n\t\xbb\n\tT\x04\xc6\rk\xc9\x00\xc7a\x04\x0b\x0b\x0e\x02V\n\te\xc9\x00a\xc9\xc6\r\xa2\xc9\x00\xc6\r\xae\xc9\xad\xb4\xa7x\x03\x07\x02\xc9\x0c\x02\n\t\xc8\n\t\xb9\n\t\x9e\x03\x07\n\t\xc8\n\t\xb9\n\t\x9e\n\t\x03\x07\x97\t\x05\xad\x01\x9a\t\n\t\xbf\n\t\x98\n\t\x8d\xc7\xc1_\x04\x03\xb8\n\t\xc8\n\t\xbb\n\tX\x02\n\t\x82\xbe\r|\x01\xc4\x01\xc7`\x04x\n\t\x03\x07\xbe\x01\xc4\x01\x05\xc1_\x00\xb3\xc7\xc5\x04`\xc2\xc5\r\xba\n\t\x03\x02\xc9\r\xb1\xc8\n\t\xb9\n\tW-\t\xbe\x01\xa1\tx\n\t\x03\x07\x02\xc9\x01$\t\x01E\t\xc8\n\t\xb9\n\tW\x03\x07\xbc\xb6\x06\x02\xc6\r\xae\xc9\x00\x8e\n\t\x8b\xca\x9c\x8f\x00\xc7\xa1\x04\n\t\xc8\n\t\xb9\n\t\x9e\x97\t\xad\x01\x9a\t\n\t\xbf\n\t\x98\n\t\x8d\x01\x00\xc7\xc1\xab\x04\n\t\xbf\n\t\xa8\n\tu\n\t\x03\x8f\x02\n\t\x89\xc9\x00\xc7\xc1\x88\x04\n\t\xbf\n\t\xa8\n\tu\n\t\x03\x02\n\t\x89\xc9\x00\xc7\xc1\x95\x04\x03\n\t\xbf\n\t\xb0\n\t\xa3\n\t\x83\x88\rz\xc9\r\xba\xc9\xc7\xc1\x95\x04\xc8\n\t\xb9\n\t\x1dH\t\x01R\t\x95\x04\xa1\r\x92\xab\rz\xc9\r\xba\xc9\x01\xc4\x01\x9f\x05\xc1\x95\xc7\x9b\x04\xab\r{\xc9\x00\xbe\r\xba\n\t\x03\t\x9b\r\t\x88\r{\xc9\x01\x91\x07\xaa\x00\xc7\xc1\xab\x04\n\t\xbf\n\t\xa8\n\tu\n\t\x03\x8f\x02\n\t\x89\xc9\x00\xb3\xc7\xc5\x01\xc4\x01\x8c\x01\xc7i\x04\xb4\x05\x0f\xb7\xb8\x0f\xadL\x00\xc7\x84\x04\xbc\x03\xb8\n\t\xc8\n\tP\n\t\x17\x02\n\t6\x05\xc1\xc4\r\"\r)\x01i\x06\x02\xbd\x01\xc5\x06\x02\xc2\xc5\xb3\x08\xa5\x05\n\t\xc8\n\t\xa6\n\tY\x04\xc4\r\x86\xc9\xbc\xc4\rO\xc9\xc7\xbd\x04\xbc\xb7\xb2\x06\x02\xb3\xa5\t\x84\xbc\xc4\rp\xc9\x05\xc8\n\t\xa6\n\t\x19\x01\xc0\xb7\x04n\x00(\x00\xc7\xb7\x04\xb7\rQ\xc9\x00\xc4\rD\x00\xc2\xc5\x05\n\t\xc8\n\t\xa6\n\t\x1e\xc7\x87\x04\xc4\r\x87\xc9\x00\x07\xaa\t\xc4\rF\x05\x87\x05\n\t\xc8\n\t\xbb\n\ttm\t\xc7\xa5\t%\x00\xc7\xb7\x04\xbc\xc4\r\xbd\x01j\xa5\x04j\x00\xbd\xc7\xc0\xc9\x93\x05\n\t\xc8\n\t\xa6\n\t\x14\x07\xaa\t<\xc4\rf\xc9\xbc\xc4\rf\xc9\x06\x02\xc2\xc0\x01\xc3\x06\x02\xbf\n\t\xb0\n\tg\n\t\x03\xbe\r\xba\xc9\rb\xc9\x00\xc2\xc3\xc7\xc3\x04\xbc\xc4\rp\xc9\x05\xc8\n\t\xa6\n\t\x18\x00\xbf\n\t\xb0\n\tg\n\t\x03\x00\xc2\xc3\x00\xbc\xc4\r@\xc9\n\t\xc8\n\t\xc4\n\t[\n\t\x1a\n\t\xc8\n\t\xc4\n\t[\n\t\\\x06\x02\xbc\xb4\xc4\rC\xc9\x00\xc2\xc0\x05\xc8\n\t\xbb\n\tt\n\t\x8a\x02\n\t~\xa0\r\x85\xbc}\r&\xc9\'\n\tB\xad\xb2\t\xc9\x04\rA\r\x7f\xc9\x00\n\t\xc8\n\t\xbb\n\t \n\t>\n\t\xc8\n\t\xbb\n\tZ\n\to\n\t\xc8\n\t\xbb\n\t\x11\n\to\r\x81\xc9\x00\xc7\xb2\t\n\t\xc8\n\t\xbb\n\t\x10\x04\r;\xc9\x00s\n\t\xc8\n\t\xaf\x00\xc7\xc1q\t\x05\xc1\n\t\xc8\n\t\xbb\n\tZ\x04\x04q\r8\xc9\x00\rI\xc9\x00\\\n\t5s\n\t\xc8\n\t\xaf\x00\xc7\xc1y\x04\xc8\n\t]\n\tS\x04\x05\xc1y\x00y\r9\xc9";
pub const IDENT_SIZE: usize = 185;
static NAMES: &[&str] = &[
    "AlwaysArray",
    "ArrayWriter",
    "BytesWriter",
    "Decoder",
    "EMPTY_OBJECT_FOR_EXTERNALLY_TAGGED_ENUM",
    "Field",
    "FromBinary",
    "FromText",
    "MULTIPLE_FIELDS_FOR_EXTERNALLY_TAGGED_ENUM",
    "NO_FIELD_MATCHED_AN_ENUM_VARIANT",
    "Object",
    "ObjectSchemaInner",
    "Result",
    "SkipFieldVisitor",
    "UNKNOWN_VARIANT",
    "UnsafeReturn",
    "ValueWriter",
    "allow",
    "at",
    "binary",
    "bitset",
    "bool",
    "byte",
    "clippy",
    "continue",
    "ctx",
    "decode_with_alias",
    "default_default",
    "defaults",
    "destination",
    "drops",
    "emplace_json_for_with_attribute",
    "enter_object",
    "enter_seen_object",
    "erased_drop_in_place",
    "erased_emplace_from_json",
    "fields",
    "from",
    "from_text",
    "in",
    "inner_writer",
    "into_string",
    "iter",
    "join_array_with_next_value",
    "loop",
    "name",
    "new",
    "offset",
    "peek",
    "push_unchecked_ascii",
    "question_mark",
    "read_seen_string",
    "report_error",
    "required",
    "restore_for_retry",
    "result",
    "skipped_field",
    "smart_object_comma",
    "start_json_array",
    "static",
    "str",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "take_string",
    "text",
    "to_string",
    "visitor",
    "with_capacity",
    "AlwaysObject",
    "AlwaysString",
    "Default",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "MISSING_CONTENT_TAG",
    "ObjectWriter",
    "Peek",
    "String",
    "TextWriter",
    "Visitor",
    "__flatten_visitor_jsony",
    "__result",
    "__scope_jsony",
    "as_mut",
    "decode_binary",
    "decode_json",
    "default",
    "discard_remaining_object_fields",
    "drop_in_place",
    "encode_binary",
    "erased",
    "is_at_content",
    "join_object_with_next_value",
    "key",
    "message",
    "next_field",
    "non_terminating",
    "object_step",
    "object_writer",
    "push_colon",
    "use",
    "DecodeError",
    "MaybeUninit",
    "Parser",
    "ToBinary",
    "__schema_inner",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "byte_add",
    "decoder",
    "emplace_from_json",
    "end_json_array",
    "impl",
    "join_parent_json_value_with_next",
    "new_field_visitor",
    "new_unchecked",
    "other_tag",
    "push",
    "skip_value",
    "snapshot",
    "temp_flatten",
    "uninit",
    "FromJson",
    "Kind",
    "None",
    "PhantomData",
    "Self",
    "__TEMP",
    "automatically_derived",
    "break",
    "decode",
    "else",
    "encode_json",
    "flatten_visitor",
    "for",
    "inner",
    "marker",
    "offset_of",
    "phantom",
    "temp2",
    "type",
    "where",
    "ObjectSchema",
    "Some",
    "encoder",
    "schema",
    "start_json_object",
    "NonNull",
    "_err",
    "at_content",
    "error",
    "fn",
    "mem",
    "push_comma",
    "success",
    "temp",
    "push_str",
    "const",
    "end_json_object",
    "ToJson",
    "ptr",
    "write",
    "_",
    "if",
    "unsafe",
    "encode_json__jsony",
    "self",
    "variant",
    "as",
    "__internal",
    "cast",
    "json",
    "match",
    "value",
    "dst",
    "std",
    "Ok",
    "mut",
    "return",
    "err",
    "parser",
    "Err",
    "out",
    "let",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 16;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new(';', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Joint),
        Punct::new('\'', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('|', Spacing::Alone),
        Punct::new('#', Spacing::Joint),
        Punct::new('.', Spacing::Alone),
        Punct::new('-', Spacing::Joint),
        Punct::new('*', Spacing::Alone),
    ]
}
