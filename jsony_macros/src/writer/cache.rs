use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"e\x03\x06\n\t\x01d\x01\x00\x87Kb\t\x04\x9d\n\t\x1d\n\t\x11\x03\x06\x08\x01oxJ\x05\r\x93\x87h\x94\t\n\t\x9a\n\t\x92\n\t\x81\x03\xa1\x01\x00\x9f\t\x04\n\t\x9f\n\tE\x03\x06\x08\x01o\n\tJ\x93\x87O\x94\t\n\t\x9a\n\t\x92\n\t\x81\x03\xa1\x01\x00\x9f\t\x04\x9d\x08\x01\n\t\x9a\n\t:\n\t\x17\x03\xa1\x00\x04\x06<\n\t\xa0\n\t\x99\n\tz\x01\x93e\n\tqd\tq\x00\x87L\x04\x89\x00|\t\x04\x9d\x1b\x03@\x01\n\t\x8bd\n\tq\x00x[\x05\r\x87\x8c\x04\x89\x00\x9c\t\x04\x9d\xa0\n\tH\x08\x01o\n\t[\n\tq\x01\n\tL\x01\n\tK\n\tZ\x03\x06\n\t\x13\x03\x06\n\t\x8e\n\t)\x01\n\tO\n\t\x8e\n\t\x120\t\x003\t\n\t\x9a\n\t}\n\tW\x0c\x00{\t\x9a\n\t}\n\t?\x9a\n\t\x92\n\tN\n\t\x03\x01\x97\x93\x87\x0e\x9d\x0b\x92\t\n\t\x9a\n\t\x92\n\t\x81\x03\xa1\x01\x0b\x9e\x8d\t\x92\x02\x8f\xa1\x02\x86\n\t\xa0\n\t\x8e\n\t\x19\n\t\xa0\n\t\x8e\n\t\x15*\t\x04\x00&\t\x04\x00#\t\x04\x9e\x9du\x05\x03\x97\n\t\xa0\n\t\x99\n\tC\x01\n\th\x94\x02 \x00\x9f\x00\rs\n\t\x03\x06\x01\xa1\x02{\x94\x00\x9f\x00p\x04\x9du\x9c\x02\x7f\xa1\r\x9c\x02\x88\r\x03\x97\n\t\xa0\n\t\x8b\x01\n\t\x8c\x04\x89\x02\x9c\x02\x84\xa1\x83\x96\t\xa1\x05\x83\x93\x87s\x03\x06\x01\xa1\x08\x01\n\t\xa0\n\t\x8e\n\tn\x03\x06f\t\x04\x83\x00j\t\n\t\x9a\n\tg\n\t^\x94\x00\x9f\x00]\xa0\n\t\x8e\n\tB$\t\x94\x00~\ts\n\t\x03\x06\x01\xa1\x00\x1e\t\x009\t\xa0\n\t\x8e\n\tB\x03\x06\x91\x89\x07\x01\x9c\x02\x84\xa1\ro\n\t[\xa2xr\r\x9e~\x05\n\t\xa0\n\t\x8e\n\tnf\t\x83\x00j\t\n\t\x9a\n\tg\n\t^\x00\r\x9e\x9d\x85\x05\n\t\x9a\n\t}\n\t\\\n\t\x03r\x01\n\tm\xa1\r\x9e\x9dl\x05\n\t\x9a\n\t}\n\t\\\n\t\x03\x01\n\tm\xa1\r\x9e\x9du\x05\x03\n\t\x9a\n\t\x92\n\t\x81\n\til\x02`\xa1\x02\x8f\xa1\rQ\x9e\x9b\x05~\x02{\x85\x02`\xa1\x02\x8f\xa1\x98\x9b\x9ew\x05\x85\x02a\xa1\r\x94\x02\x8f\n\t\x03\x01\xa1\x02\x86\tw\x02\tl\x02a\xa1\x00t\x06\x80\r\x9e\x9d\x85\x05\n\t\x9a\n\t}\n\t\\\n\t\x03r\x01\n\tm\xa1\rQ\x9e\x9b\x00\x9f\x00]\x00\x91\x03\x97\n\t\xa0\n\tZ\x03\x06\x01\x01\n\t\"\x00\x9b\x9eS\x05\x9f\x02R\r\x06\x80\t\x9f\x02R\x05S\r\x04\n\t\xa0\n\t\x99\n\tzv\t\x9f\x02!\xa1\r\x95\x9e\x8a\x05\x91\x9f\x02\x07\x01\x8d\x00\x9b\x07\x01\x98\x9b\x9e\x95\xa1c\x04\xa0\n\t\x99\n\tz\x91\x8a\x96\x07\x01\x9f\x02X\x8a\x02Y\xa1\r\x98\x9b\x04\n\t\xa0\n\t\x9f\n\tI\x9f\x02%\xa1\x9e\x90\x05\x91\x9f\x022\xa1\x98\x95\x00\x95\r\x9a\n\t\x92\n\tN\n\t\x03\x94\x02\x8f\xa1\x02\x1c\xa1\r\x98\x90\r\x91\x9f\x024\xa1\n\t\xa0\n\t\x9f\n\tF\n\t\x14\n\t\xa0\n\t\x9f\n\tF\n\tG\x07\x01\x91\x9f\x028\xa1\x9e\x8d\x05\x91\x8a\r\x98\x95|\x02k\x91b\x02\x1f\xa1\x025\xa1\r\x026\xa1\r\x027\x02P\xa1\r\n\t\xa0\n\t\x99\n\t\x1a\n\t1\n\t\xa0\n\t\x99\n\tD\n\tU\n\t\xa0\n\t\x99\n\t\x10\n\tU\x9e\x96\t\n\t\xa0\n\t\x99\n\t\x18\x05\x03\x96\x97\n\t\xa0\n\t\x8b\x01\n\t\x8c\x02T\xa1\r\x9e\x96\t\n\t\xa0\n\t\x99\n\t\x16\x05\x03\x96\x97\n\t\xa0\n\t\x8b\x01\n\t\x8c\x02/\xa1\r\x02T\xa1\r\x9e\x96\t\n\t\xa0\n\t\x99\n\t\x0f\x05\x03\x96\x97\n\t\xa0\n\t\x8b\x01\n\t\x8c\x02.\xa1\r\x9e\x9dV\t\x04\x9d\n\t\xa0\n\t\x99\n\tD\x05M\x05V\x02,\xa1\rM\x02;\xa1\rG\n\t+\x9e\x9d_\x05\xa0\n\tH\n\tA\x05\x04\x9d_\r_\x02-\xa1";
pub const IDENT_SIZE: usize = 146;
static NAMES: &[&str] = &[
    "ArrayValue",
    "ArrayWriter",
    "Decoder",
    "Field",
    "FromBinary",
    "Object",
    "ObjectSchemaInner",
    "ObjectValue",
    "Result",
    "StringValue",
    "UnsafeReturn",
    "ValueWriter",
    "Vec",
    "as_mut",
    "binary",
    "bitset",
    "byte",
    "byte_add",
    "clear_error",
    "decode_json",
    "defaults",
    "destination",
    "discard_remaining_object_fields",
    "drops",
    "enter_object",
    "enter_seen_object",
    "erase",
    "fields",
    "from",
    "inner_writer",
    "into_string",
    "join_array_with_next_value",
    "join_object_with_next_value",
    "name",
    "new",
    "object_step",
    "offset",
    "peek",
    "push_colon",
    "push_comma",
    "push_unchecked_ascii",
    "read_seen_string_unescaped",
    "required",
    "result",
    "smart_object_comma",
    "static",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "transmute",
    "u8",
    "with_capacity",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "ObjectWriter",
    "Parser",
    "Peek",
    "String",
    "TextWriter",
    "UNKNOWN_VARIANT",
    "Vistor",
    "binary_decode",
    "binary_encode",
    "builder",
    "drop_in_place",
    "emplace_from_json",
    "end_json_array",
    "if",
    "index",
    "initial_index",
    "join_parent_json_value_with_next",
    "non_terminating",
    "object_writer",
    "offset_of",
    "report_error",
    "to_string",
    "FromJson",
    "Kind",
    "MaybeUninit",
    "None",
    "PhantomData",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "decoder",
    "else",
    "for",
    "impl",
    "inner",
    "marker",
    "new_field_visitor",
    "new_unchecked",
    "phantom",
    "push",
    "temp_flatten",
    "uninit",
    "ObjectSchema",
    "Self",
    "Some",
    "ToBinary",
    "__TEMP",
    "__schema_inner",
    "break",
    "flatten_visitor",
    "message",
    "temp2",
    "type",
    "where",
    "DecodeError",
    "decode",
    "encoder",
    "mem",
    "schema",
    "start_json_object",
    "success",
    "NonNull",
    "_err",
    "const",
    "end_json_object",
    "temp",
    "write",
    "fn",
    "push_str",
    "self",
    "variant",
    "ToJson",
    "jsonify_into",
    "value",
    "__internal",
    "cast",
    "err",
    "match",
    "ptr",
    "unsafe",
    "dst",
    "Ok",
    "_",
    "as",
    "return",
    "json",
    "std",
    "Err",
    "out",
    "mut",
    "let",
    "parser",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let mut cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 15;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new(',', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new('.', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('\'', Spacing::Joint),
        Punct::new('=', Spacing::Joint),
        Punct::new('-', Spacing::Joint),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('|', Spacing::Alone),
        Punct::new('!', Spacing::Alone),
        Punct::new(';', Spacing::Alone),
        Punct::new('*', Spacing::Alone),
    ]
}
