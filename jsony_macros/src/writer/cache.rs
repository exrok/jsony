use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"g\x03\x06\n\t\x01f\x01\x00\x89Kd\t\x05\x9f\n\t\x1d\n\t\x11\x03\x06\x08\x01qzJ\x04\r\x95\x89j\x96\t\n\t\x9c\n\t\x94\n\t\x83\x03\xa3\x01\x00\xa1\t\x05\n\t\xa1\n\tE\x03\x06\x08\x01q\n\tJ\x95\x89O\x96\t\n\t\x9c\n\t\x94\n\t\x83\x03\xa3\x01\x00\xa1\t\x05\x9f\x08\x01\n\t\x9c\n\t:\n\t\x17\x03\xa3\x00\x05\x06<\n\t\xa2\n\t\x9b\n\t|\x01\x95g\n\tsf\ts\x00\x89L\x05\x8b\x00~\t\x05\x9f\x1b\x03@\x01\n\t\x8df\n\ts\x00z]\x04\r\x89\x8e\x05\x8b\x00\x9e\t\x05\x9f\xa2\n\tH\x08\x01q\n\t]\n\ts\x01\n\tL\x01\n\tK\n\t\\\x03\x06\n\t\x13\x03\x06\n\t\x90\n\t)\x01\n\tO\n\t\x90\n\t\x120\t\x003\t\n\t\x9c\n\t\x7f\n\tX\x0c\x00}\t\x9c\n\t\x7f\n\t?\x9c\n\t\x94\n\tN\n\t\x03\x01\x99\x95\x89\x0e\x9f\x0b\x94\t\n\t\x9c\n\t\x94\n\t\x83\x03\xa3\x01\x0b\xa0\x8f\t\x94\x02\x91\xa3\x02\x88\n\t\xa2\n\t\x90\n\t\x19\n\t\xa2\n\t\x90\n\t\x15*\t\x05\x00&\t\x05\x00#\t\x05\xa0\x9fw\x04\x03\x99\n\t\xa2\n\t\x9b\n\tC\x01\n\tj\x96\x02 \x00\xa1\x00\ru\n\t\x03\x06\x01\xa3\x02}\x96\x00\xa1\x00r\x05\x9fw\x9e\x02\x81\xa3\r\x9e\x02\x8a\r\x03\x99\n\t\xa2\n\t\x8d\x01\n\t\x8e\x05\x8b\x02\x9e\x02\x86\xa3\x85\x98\t\xa3\x04\x85\x95\x89u\x03\x06\x01\xa3\x08\x01\n\t\xa2\n\t\x90\n\tp\x03\x06h\t\x05\x85\x00l\t\n\t\x9c\n\ti\n\t`\x96\x00\xa1\x00_\xa2\n\t\x90\n\tB$\t\x96\x00\x80\tu\n\t\x03\x06\x01\xa3\x00\x1e\t\x009\t\xa2\n\t\x90\n\tB\x03\x06\x93\x8b\x07\x01\x9e\x02\x86\xa3\rq\n\t]\xa4zt\r\xa0\x80\x04\n\t\xa2\n\t\x90\n\tph\t\x85\x00l\t\n\t\x9c\n\ti\n\t`\x00\r\xa0\x9f\x87\x04\n\t\x9c\n\t\x7f\n\t^\n\t\x03t\x01\n\to\xa3\r\xa0\x9fn\x04\n\t\x9c\n\t\x7f\n\t^\n\t\x03\x01\n\to\xa3\r\xa0\x9fw\x04\x03\n\t\x9c\n\t\x94\n\t\x83\n\tkn\x02b\xa3\x02\x91\xa3\rQ\xa0\x9d\x04\x80\x02}\x87\x02b\xa3\x02\x91\xa3\x9a\x9d\xa0y\x04\x87\x02c\xa3\r\x96\x02\x91\n\t\x03\x01\xa3\x02\x88\ty\x02\tn\x02c\xa3\x00v\x06\x82\r\xa0\x9f\x87\x04\n\t\x9c\n\t\x7f\n\t^\n\t\x03t\x01\n\to\xa3\rQ\xa0\x9d\x00\xa1\x00_\x00\x93\x03\x99\n\t\xa2\n\t\\\x03\x06\x01\x01\n\t\"\x00\x9d\xa0S\x04\xa1\x02R\r\xa0T\x04\xa1\x02Y\r\x06\x82\t\xa1\x02R\x04S\r\xa1\x02Y\x04T\r\x05\n\t\xa2\n\t\x9b\n\t|x\t\xa1\x02!\xa3\r\x97\xa0\x8c\x04\x93\xa1\x02\x07\x01\x8f\x00\x9d\x07\x01\x9a\x9d\xa0\x97\xa3e\x05\xa2\n\t\x9b\n\t|\x93\x8c\x98\x07\x01\xa1\x02Z\x8c\x02[\xa3\r\x9a\x9d\x05\n\t\xa2\n\t\xa1\n\tI\xa1\x02%\xa3\xa0\x92\x04\x93\xa1\x022\xa3\x9a\x97\x00\x97\r\x9c\n\t\x94\n\tN\n\t\x03\x96\x02\x91\xa3\x02\x1c\xa3\r\x9a\x92\r\x93\xa1\x024\xa3\n\t\xa2\n\t\xa1\n\tF\n\t\x14\n\t\xa2\n\t\xa1\n\tF\n\tG\x07\x01\x93\xa1\x028\xa3\xa0\x8f\x04\x93\x8c\r\x9a\x97~\x02m\x93d\x02\x1f\xa3\x025\xa3\r\x026\xa3\r\x027\x02P\xa3\r\n\t\xa2\n\t\x9b\n\t\x1a\n\t1\n\t\xa2\n\t\x9b\n\tD\n\tV\n\t\xa2\n\t\x9b\n\t\x10\n\tV\xa0\x98\t\n\t\xa2\n\t\x9b\n\t\x18\x04\x03\x98\x99\n\t\xa2\n\t\x8d\x01\n\t\x8e\x02U\xa3\r\xa0\x98\t\n\t\xa2\n\t\x9b\n\t\x16\x04\x03\x98\x99\n\t\xa2\n\t\x8d\x01\n\t\x8e\x02/\xa3\r\x02U\xa3\r\xa0\x98\t\n\t\xa2\n\t\x9b\n\t\x0f\x04\x03\x98\x99\n\t\xa2\n\t\x8d\x01\n\t\x8e\x02.\xa3\r\xa0\x9fW\t\x05\x9f\n\t\xa2\n\t\x9b\n\tD\x04M\x04W\x02,\xa3\rM\x02;\xa3\rG\n\t+\xa0\x9fa\x04\xa2\n\tH\n\tA\x04\x05\x9fa\ra\x02-\xa3";
pub const IDENT_SIZE: usize = 148;
static NAMES: &[&str] = &[
    "ArrayValue",
    "ArrayWriter",
    "Decoder",
    "Field",
    "FromBinary",
    "Object",
    "ObjectSchemaInner",
    "ObjectValue",
    "Result",
    "StringValue",
    "UnsafeReturn",
    "ValueWriter",
    "Vec",
    "as_mut",
    "binary",
    "bitset",
    "byte",
    "byte_add",
    "clear_error",
    "decode_json",
    "defaults",
    "destination",
    "discard_remaining_object_fields",
    "drops",
    "enter_object",
    "enter_seen_object",
    "erase",
    "fields",
    "from",
    "inner_writer",
    "into_string",
    "join_array_with_next_value",
    "join_object_with_next_value",
    "name",
    "new",
    "object_step",
    "offset",
    "peek",
    "push_colon",
    "push_comma",
    "push_unchecked_ascii",
    "read_seen_string_unescaped",
    "required",
    "result",
    "smart_object_comma",
    "static",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "transmute",
    "u8",
    "with_capacity",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "ObjectWriter",
    "Parser",
    "Peek",
    "String",
    "TextWriter",
    "UNKNOWN_VARIANT",
    "Vistor",
    "binary_decode",
    "binary_encode",
    "builder",
    "drop_in_place",
    "emplace_from_json",
    "end_json_array",
    "if",
    "index",
    "initial_index",
    "initial_remaining_depth",
    "join_parent_json_value_with_next",
    "non_terminating",
    "object_writer",
    "offset_of",
    "remaining_depth",
    "report_error",
    "to_string",
    "FromJson",
    "Kind",
    "MaybeUninit",
    "None",
    "PhantomData",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "decoder",
    "else",
    "for",
    "impl",
    "inner",
    "marker",
    "new_field_visitor",
    "new_unchecked",
    "phantom",
    "push",
    "temp_flatten",
    "uninit",
    "ObjectSchema",
    "Self",
    "Some",
    "ToBinary",
    "__TEMP",
    "__schema_inner",
    "break",
    "flatten_visitor",
    "message",
    "temp2",
    "type",
    "where",
    "DecodeError",
    "decode",
    "encoder",
    "mem",
    "schema",
    "start_json_object",
    "success",
    "NonNull",
    "_err",
    "const",
    "end_json_object",
    "temp",
    "write",
    "fn",
    "push_str",
    "self",
    "variant",
    "ToJson",
    "jsonify_into",
    "value",
    "__internal",
    "cast",
    "err",
    "match",
    "ptr",
    "unsafe",
    "dst",
    "Ok",
    "_",
    "as",
    "return",
    "json",
    "std",
    "Err",
    "out",
    "mut",
    "let",
    "parser",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let mut cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 15;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new(',', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new('.', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('\'', Spacing::Joint),
        Punct::new('=', Spacing::Joint),
        Punct::new('-', Spacing::Joint),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('|', Spacing::Alone),
        Punct::new('!', Spacing::Alone),
        Punct::new(';', Spacing::Alone),
        Punct::new('*', Spacing::Alone),
    ]
}
