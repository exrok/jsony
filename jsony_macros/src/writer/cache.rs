use proc_macro::{Punct, Spacing};
pub static BLIT_SRC: &[u8] =
b"\xa9\x03\x07\n\t\x01\xa8\x01\x02\xc4\xb9\t\xa6\x04w\r\xc4\xb9\t\xa6\x04\x03\xce\n\t\xdb\n\t\x92\x01\n\t\xb9\r\xc0e\xba\t\x05\xd2\n\t&\n\t\x17\x03\x07\x08\x01\xa5\xad^\x04\r\xc8\xc0\x88\xd0\t\n\t\xd4\n\t\xc1\n\t\xaf\x03\xdc\x01\x02\xd7\t\x05\n\t\xd7\n\t{\x03\x07\x08\x01\xa5\n\t^\xc8\xc0\x84\xd0\t\n\t\xd4\n\t\xc1\n\t\xaf\x03\xdc\x01\x02\xd7\t\x05\xd2\x08\x01\n\t\xd4\n\t\x8b\n\t\x97\x03\xdc\x02\x05\x07v\n\t\xdb\n\t\xcc\n\tx\x01\xc8\xa9\n\t\x99\xa8\t\x99\x02\xc0i\x05\xcd\x02\xbf\t\x05\xd2\n\t\xdb\n\t\x15\n\t\xbe\xa8\n\t\xbe\x02\xad\x94\x04\n\t\xbe\x01\n\t\x94\r\xc0\xc5\x05\xcd\x02\xd8\t\x05\xd2\xdb\n\t]\x08\x01\xa5\n\t\x94\n\t\x99\x01\n\ti\n\te\xcb\xae\x12\x04y\n\t\x83\xdc\xda\x86\x04\r\xda\x9e\t\xc0\x08\x01\n\t\xd4\n\t\x8b\n\t\x97\x03\xdc\x02\x98\x01\x04\r\xcb\xda\xd9\x05\x86\xba\x00\xc3\x04\xb0\xd6\x00<\xdc\n\t\x92\x03\x07\n\t\xc9\n\t0\n\t\x03\x05\xd2\n\t\xdb\n\t\xd7\n\t{\x03\x07\x02\xc7\x01\n\tf\n\t\xc9\n\t/\n\t\x03\n\t\xc9\n\t4\n\t\x03\x07\x01\xdc\n\t\xc9\n\t\x19A\t\x02C\t\n\t\xd4\n\t\xbd\n\t\xaa\x0b\x02\x9c\t\n\t\xdb\n\t\xc9\n\t3\n\t\x03\n\t\xdb\n\t\xc9\n\t+\n\t\x03\x0e\xc1\t\n\t\xd4\n\t\xc1\n\t\xaf\x03\xdc\x01\x0e\xda\xd1\t\xc1\x00\xca\xdc\x00\xc2\n\t\xdb\n\t\xc9\n\t!\n\t\xdb\n\t\xc9\n\t\x1f5\t\x05\x02.\t\x05\x02,\t\x05\xce\n\t\xdb\n\t\x93\x03\x07\x01\x01\n\t\x84\x00\x81\xd8\x00\xbb\n\t\x9d\xce\n\t\xdb\n\t\xbe\x01\n\t\xc5\x05\xcd\x00\xd8\x00N\xdc\r\xd8\x00\xb5\xdc\xd8\x00\x85\xdc\xd8\x00\xb5\xdc\r\xcb\x0bn\x02\xd1\x00>\xdc\xda\xc7\t\n\t\xdb\n\t\xcc\n\tW\x04n\x00\xc5\r\xd8\x00t\xdc\r\xd1\x00\xc5\r\xd8\x00\xb5\xdc\r\xd8\x00\x87\xdc\r\xda\xc7\t\n\t\xdb\n\t\xcc\n\tV\x04\xd8\x00m\xdc\r\xdaa\x04\x0e\x0e\x08\x01\ra\xdc\xd8\x00\xac\xdc\r\xd8\x00\xbc\xdc\xc4\xc8\xc0}\x03\x07\x01\xdc\x08\x01\n\t\xdb\n\t\xc9\n\t\xa4\x03\x07\n\t\xdb\n\t\xc9\n\t\xa4\n\t\x03\x07\x9f\t\x05\xc4\x02\xa1\t\n\t\xd4\n\t\xa0\n\t\x96\xda\xd2_\x04\x03\xce\n\t\xdb\n\t\xcc\n\tY\x01\n\t\x88\xd0\x00\x81\x02\xd7\x02\xda`\x04}\n\t\x03\x07\xd0\x02\xd7\x02\x05\xd2_\x04`\xd5\xd9\x00\xca\n\t\x03\x01\xdc\x00\xc2\xdb\n\t\xc9\n\tX-\t\xd0\x02\xab\t}\n\t\x03\x07\x01\xdc\x02#\t\x05\x02\'\t\x02K\t\xdb\n\t\xc9\n\tX\x03\x07\xcf\xcd\x06\x01\xd8\x00\xbc\xdc\r\xa5\n\t\x94\xdd\xad\x9a\r\xda\xab\x04\n\t\xdb\n\t\xc9\n\t\xa4\x9f\t\xc4\x02\xa1\t\n\t\xd4\n\t\xa0\n\t\x96\x02\r\xda\xd2\xb7\x04\n\t\xd4\n\t\xbd\n\tz\n\t\x03\x9a\x01\n\t\x90\xdc\r\xda\xd2\x8f\x04\n\t\xd4\n\t\xbd\n\tz\n\t\x03\x01\n\t\x90\xdc\r\xda\xd2k\x04\x03\n\t\xd4\n\t\xc1\n\t\xaf\n\t\x89\x8f\x00\x7f\xdc\x00\xca\xdc\x04\xab\x00\xb7\x00\x7f\xdc\x00\xca\xdc\x02\xd7\x02\xb0\x05\xd2k\xda\xa3\x04\xb7\x00\x80\xdc\r\xd0\x00\xca\n\t\x03\t\xa3\x00\t\x8f\x00\x80\xdc\x02\x9b\x07\xb6\r\xda\xd2\xb7\x04\n\t\xd4\n\t\xbd\n\tz\n\t\x03\x9a\x01\n\t\x90\xdc\r\xcb\xda\xd9\x02\xd7\x02\x95\x02\xdaj\x04\xc8\x05\x0f\xc6\xce\x0f\xc4\xa2\r\xda\x8a\x04\xcf\x03\xce\n\t\xdb\n\tR\n\t\x1b\x01\n\t9\x05\xd2\xd7\x00%\x00*\x02j\x06\x01\xd1\x02\xd9\x06\x01\xd5\xd9\xcb\x0b\xb2\x05\n\t\xdb\n\t\xc3\n\tZ\x05\xd1\x05\n\t\xdb\n\t\xc3\n\t\x16\x04\xd7\x00\x8d\xdc\xcf\xd7\x00Q\xdc\xda\xd1\x04\xcf\xc6\xc7\x06\x01\xcb\xb2\t\x8a\xcf\xd7\x00r\xdc\x05\xdb\n\t\xc3\n\t\x1d\x02\xd3\xc6\x04p\r)\r\xda\xc6\x04\xc6\x00T\xdc\r\xd7\x00u\r\xd5\xd9\x05\n\t\xdb\n\t\xc3\n\t \xda\x8e\x04\xd7\x00\x8e\xdc\r\x07\xb6\t\xd7\x00L\x05\x8e\x05\n\t\xdb\n\t\xcc\n\txo\t\xda\xb2\t\xa6\r\xda\xc6\x04\xcf\xd7\x00\xd1\x02l\xb2\x04l\r\xd1\xda\xd3\xdc\xa7\x05\n\t\xdb\n\t\xc3\n\t\x18\x07\xb6\t@\xd7\x00g\xdc\xcf\xd7\x00g\xdc\x06\x01\xd5\xd3\x02\xd6\x06\x01\xd4\n\t\xc1\n\th\n\t\x03\xd0\x00\xca\xdc\x00b\xdc\r\xd5\xd6\xda\xd6\x04\xcf\xd7\x00r\xdc\x05\xdb\n\t\xc3\n\t\x1c\r\xd4\n\t\xc1\n\th\n\t\x03\r\xd5\xd6\r\xcf\xd7\x00D\xdc\n\t\xdb\n\t\xd7\n\t\\\n\t\x1e\n\t\xdb\n\t\xd7\n\t\\\n\t\x98\x06\x01\xcf\xc8\xd7\x00J\xdc\r\xd5\xd3\x05\xdb\n\t\xcc\n\tx\x91\n\t\xd4\n\t\xbd\n\t\x8c\x02\xaa\rc\x0b\xce\xdb\n\t\x8c\n\t\x03\x01\xdc\x06\x04\xbf\x00G\xba\x00E\xdc\n\t\x93\x01\n\t\x84\xbf\x00\xb4\xda\xae\x04\xba\x00d\xdc\r\xcb\xae\x01\x10\x0e\xae\x03\xba\x00u6\x0b\x02\xae\x02\xb8\xdeF\xc0S\x08\x01\x05\x07v\xa2\n\t\xd4\n\t\xa2\n\t\x1a\xa8\xad\xd9\x04\n\t\xdb\n\t\xc3\n\t|\r\xc08\xd1\t\x05\xa2\x08\x01\x97\x03\xa5\x02\n\t\xdb\n\t\xc3\n\t|\x01\xcf\xd1\xc7\x06\x01\xd5\xd9\xcf\xba\x00d\xdc(\n\tI\xc4\xc7\t\xdc\x04\x00H\x00\x85\xdc\r\n\t\xdb\n\t\xcc\n\t\"\n\tB\n\t\xdb\n\t\xcc\n\t[\n\tq\n\t\xdb\n\t\xcc\n\t\x14\n\tq\x00\x87\xdc\r\xda\xc7\t\n\t\xdb\n\t\xcc\n\t\x13\x04\x00?\xdc\r\x91\n\t\xdb\n\t\xbe\r\xda\xd2s\t\x05\xd2\n\t\xdb\n\t\xcc\n\t[\x04\x04s\x00;\xdc\r\x00M\xdc\r\x98\n\t7\x91\n\t\xdb\n\t\xbe\r\xda\xd2~\x04\xdb\n\t]\n\tU\x04\x05\xd2~\r~\x00=\xdc";
pub const IDENT_SIZE: usize = 201;
pub static NAMES: [&str; 201] = [
    "AlwaysArray",
    "ArrayWriter",
    "BytesWriter",
    "CUSTOM_FIELD_VALIDATION_ERROR",
    "Decoder",
    "EMPTY_OBJECT_FOR_EXTERNALLY_TAGGED_ENUM",
    "Field",
    "FromStr",
    "FromText",
    "MULTIPLE_FIELDS_FOR_EXTERNALLY_TAGGED_ENUM",
    "NO_FIELD_MATCHED_AN_ENUM_VARIANT",
    "Object",
    "ObjectSchemaInner",
    "UNKNOWN_VARIANT",
    "UnsafeReturn",
    "ValueWriter",
    "alias",
    "allow",
    "at",
    "binary",
    "bitset",
    "clippy",
    "continue",
    "ctx",
    "default_default",
    "defaults",
    "destination",
    "drops",
    "emplace_json_for_validate_attribute",
    "emplace_json_for_with_attribute",
    "enter_object",
    "enter_seen_object",
    "erased_drop_in_place",
    "erased_emplace_from_json",
    "fields",
    "format_args",
    "from",
    "from_str",
    "from_text",
    "in",
    "inner_writer",
    "into",
    "into_string",
    "iter",
    "join_array_with_next_value",
    "loop",
    "name",
    "new",
    "offset",
    "peek",
    "pod_type",
    "pub",
    "push_as_bytes",
    "push_unchecked_ascii",
    "question_mark",
    "read_seen_string",
    "required",
    "restore_for_retry",
    "smart_object_comma",
    "start_json_array",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "take_string",
    "text",
    "to_str",
    "to_string",
    "with_capacity",
    "AlwaysObject",
    "AlwaysString",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "MISSING_CONTENT_TAG",
    "ObjectWriter",
    "Peek",
    "TextWriter",
    "Visitor",
    "__flatten_visitor_jsony",
    "__result",
    "__scope_jsony",
    "as_mut",
    "assert",
    "byte",
    "decode_binary",
    "decode_json",
    "discard_remaining_object_fields",
    "drop_in_place",
    "encode_binary",
    "erased",
    "flatten_visitor",
    "is_at_content",
    "join_object_with_next_value",
    "key",
    "message",
    "next_field",
    "non_terminating",
    "object_step",
    "object_writer",
    "push_colon",
    "report_error",
    "static",
    "true",
    "DecodeError",
    "Default",
    "MaybeUninit",
    "Parser",
    "UnknownVariant",
    "__schema_inner",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "byte_add",
    "decode_with_alias",
    "default",
    "emplace_from_json",
    "end_json_array",
    "field",
    "join_parent_json_value_with_next",
    "new_field_visitor",
    "new_unchecked",
    "other_tag",
    "result",
    "size_of",
    "skip_value",
    "snapshot",
    "temp_flatten",
    "uninit",
    "use",
    "FromBinary",
    "FromJson",
    "Kind",
    "None",
    "PhantomData",
    "Result",
    "String",
    "ToBinary",
    "__TEMP",
    "break",
    "decode",
    "encode_json",
    "func",
    "inner",
    "marker",
    "phantom",
    "str",
    "temp2",
    "ObjectSchema",
    "Self",
    "bool",
    "else",
    "for",
    "impl",
    "offset_of",
    "schema",
    "start_json_object",
    "type",
    "version",
    "NonNull",
    "Some",
    "_err",
    "at_content",
    "automatically_derived",
    "push",
    "push_comma",
    "success",
    "temp",
    "where",
    "POD",
    "decoder",
    "push_str",
    "end_json_object",
    "mem",
    "ToJson",
    "encoder",
    "fn",
    "ptr",
    "write",
    "error",
    "const",
    "encode_json__jsony",
    "variant",
    "_",
    "unsafe",
    "__internal",
    "cast",
    "if",
    "json",
    "self",
    "as",
    "match",
    "dst",
    "value",
    "mut",
    "Ok",
    "std",
    "return",
    "err",
    "parser",
    "out",
    "Err",
    "let",
    "jsony",
];
pub const PUNCT_SIZE: usize = 19;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new('.', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Joint),
        Punct::new('\'', Spacing::Joint),
        Punct::new('-', Spacing::Joint),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new('#', Spacing::Joint),
        Punct::new(';', Spacing::Alone),
        Punct::new('|', Spacing::Alone),
        Punct::new('*', Spacing::Alone),
        Punct::new('|', Spacing::Joint),
        Punct::new('+', Spacing::Alone),
        Punct::new('>', Spacing::Joint),
    ]
}
