use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"h\x03\x06\n\t\x02}\x02\x01\x94Ne\t\x04\xa8\n\t\x1c\n\t\x12\x03\x06\x08\x02w\x82M\x05\r\x9c\x94l\xa3\t\n\t\xa7\n\t\x9a\n\t\x8b\x03\xae\x02\x01\xaa\t\x04\n\t\xaa\n\t_\x03\x06\x08\x02w\n\tM\x9c\x94f\xa3\t\n\t\xa7\n\t\x9a\n\t\x8b\x03\xae\x02\x01\xaa\t\x04\xa8\x08\x02\n\t\xa7\n\t8\n\t\x17\x03\xae\x01\x04\x06=\n\t\xad\n\t\xa5\n\t\x84\x02\x9ch\n\ta}\ta\x01\x94O\x04\x9b\x01\x87\t\x04\xa8\n\t\xad\n\t\x11\n\t\x96}\n\t\x96\x01\x82u\x05\n\t\x96\x02\n\tu\r\x94\x9d\x04\x9b\x01\xac\t\x04\xa8\xad\n\tK\x08\x02w\n\tu\n\ta\x02\n\tO\n\tN\n\tt\x03\x06\n\t\x14\x03\x06\n\t\x9f\n\t$\n\t\x03\x04\xa8\n\t\xad\n\t\xaa\n\t_\x03\x06\x01\x9e\x02\n\tU\n\t\x9f\n\t\'\x02\n\tf\n\t\x9f\n\t\x13/\t\x012\t\n\t\xa7\n\t\x90\n\tn\x0b\x01\x86\t\xa7\n\t\x90\n\t@\xa7\n\t\x9a\n\tR\n\t\x03\x02\xa2\x9c\x94\x0e\xa8\x0c\x9a\t\n\t\xa7\n\t\x9a\n\t\x8b\x03\xae\x02\x0c\xab\xa1\t\x9a\x00\x98\xae\x00\x93\n\t\xad\n\t\x9f\n\t\x19\n\t\xad\n\t\x9f\n\t\x16(\t\x04\x01#\t\x04\x01 \t\x04\xab\xa8\x8e\x05\x03\xa2\n\t\xad\n\t\xa5\n\tF\x02\n\tl\xa3\x00Q\x01\xaa\x01\rz\n\t\x03\x06\x02\xae\x00\x86\xa3\x01\xaa\x01x\x04\xa8\x8e\xa2\n\t\xad\n\tt\x03\x06\x02\x02\n\tf\xac\x00\x91\n\t~\xa2\n\t\xad\n\t\x96\x02\n\t\x9d\x04\x9b\x00\xac\x00<\xae\r\xac\x00\x80\xae\xac\x00g\xae\xac\x00\x80\xae\rV\x01\xa1\x00-\xae\xab\x9e\t\n\t\xad\n\t\xa5\n\tD\x05V\x00\x9d\r\xac\x00Y\xae\r\xa1\x00\x9d\r\xac\x00\x80\xae\r\xac\x00j\xae\r\xab\x9e\t\n\t\xad\n\t\xa5\n\tC\x05\xac\x00T\xae\r\xac\x00\x89\xae\r\xac\x00\x95\xae\x8d\x9e\t\xae\x05\x8d\x9c\x94z\x03\x06\x02\xae\x08\x02\n\t\xad\n\t\x9f\n\tv\x03\x06i\t\x04\x8d\x01o\t\n\t\xa7\n\tk\n\t`\xa3\x01\xaa\x01^\xad\n\t\x9f\n\tE!\t\xa3\x01\x88\tz\n\t\x03\x06\x02\xae\x01\x1d\t\x016\t\xad\n\t\x9f\n\tE\x03\x06\x99\x9b\x07\x02\xac\x00\x95\xae\rw\n\tu\xaf\x82y\r\xab\x88\x05\n\t\xad\n\t\x9f\n\tvi\t\x8d\x01o\t\n\t\xa7\n\tk\n\t`\x01\r\xab\xa8\x92\x05\n\t\xa7\n\t\x90\n\t]\n\t\x03y\x02\n\ts\xae\r\xab\xa8r\x05\n\t\xa7\n\t\x90\n\t]\n\t\x03\x02\n\ts\xae\r\xab\xa8\x8e\x05\x03\n\t\xa7\n\t\x9a\n\t\x8b\n\tmr\x00c\xae\x00\x98\xae\xab\xa8\x8e\x05\xad\n\t\x9f\n\t\x18:\t\x01A\t\x8e\x8f\xab\xa9\x05\x88\x00\x86\x92\x00c\xae\x00\x98\xae\xa6\xa9\xab\x81\x05\x92\x00d\xae\r\xa3\x00\x98\n\t\x03\x02\xae\x00\x93\t\x81\x00\tr\x00d\xae\x01{\x06\x8a\r\xab\xa8\x92\x05\n\t\xa7\n\t\x90\n\t]\n\t\x03y\x02\n\ts\xae\r\x8f\xab\xa9\x01\xaa\x01^\x01\x8f\x0b\x85\x04\n\t\xad\n\t\xaa\n\tG\x01\xa9\x05\xaa\x009\xae\xabq\x05\xaa\x00q\xae\r\x06\x8a\t\xaa\x007\x04q\x04\n\t\xad\n\t\xa5\n\t\x84\x7f\t\xab\x85\t\x1e\r\xab\x97\x05\x99\xaa\x00\xa1\x01S\x85\x05S\r\xa1\x07\x02\xa1\x01\x07\x02\xa6\xa9\xab\xa4\xae|\x04\xad\n\t\xa5\n\t\x84\x99\x97\x9e\x07\x02\xab\x97\x05\x97\x00[\xae\r\xaa\x00Z\r\xa6\xa9\x04\n\t\xad\n\t\xaa\n\tL\x8f\x85\xaa\x00\"\xae\xab\xa0\x05\x99\xaa\x001\xae\xa6\xa4\x01\xa4\r\xa7\n\t\x9a\n\tR\n\t\x03\xa3\x00\x98\xae\x00\x1b\xae\r\xa6\xa0\r\x99\xaa\x003\xae\n\t\xad\n\t\xaa\n\tI\n\t\x15\n\t\xad\n\t\xaa\n\tI\n\tJ\x07\x02\x99\xaa\x005\xae\xab\xa1\x05\x99\x97\r\xa6\xa4\x87\x00p\x99e\x00\x1f\xae\x004\x00g\xae\r\n\t\xad\n\t\xa5\n\t\x1a\n\t0\n\t\xad\n\t\xa5\n\tH\n\tW\n\t\xad\n\t\xa5\n\t\x10\n\tW\x00j\xae\r\xab\x9e\t\n\t\xad\n\t\xa5\n\t\x0f\x05\x00.\xae\r\\\n\t\xad\n\t\x96\r\xab\xa8X\t\x04\xa8\n\t\xad\n\t\xa5\n\tH\x05P\x05X\x00+\xae\rP\x00;\xae\rJ\n\t)\\\n\t\xad\n\t\x96\r\xab\xa8b\x05\xad\n\tK\n\tB\x05\x04\xa8b\rb\x00,\xae";
pub const IDENT_SIZE: usize = 159;
static NAMES: &[&str] = &[
    "AlwaysArray",
    "ArrayWriter",
    "BytesWriter",
    "Decoder",
    "Field",
    "FromBinary",
    "Object",
    "ObjectSchemaInner",
    "Result",
    "SkipFieldVisitor",
    "UnsafeReturn",
    "ValueWriter",
    "as_mut",
    "binary",
    "bitset",
    "bool",
    "byte",
    "defaults",
    "destination",
    "discard_remaining_object_fields",
    "drops",
    "emplace_json_for_with_attribute",
    "enter_object",
    "enter_seen_object",
    "erase",
    "fields",
    "from",
    "in",
    "inner_writer",
    "into_string",
    "iter",
    "join_array_with_next_value",
    "name",
    "new",
    "object_step",
    "offset",
    "peek",
    "push_unchecked_ascii",
    "read_seen_string_unescaped",
    "required",
    "restore_for_retry",
    "result",
    "skip_value",
    "skipped_field",
    "smart_object_comma",
    "start_json_array",
    "static",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "transmute",
    "visitor",
    "with_capacity",
    "AlwaysObject",
    "AlwaysString",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "MISSING_CONTENT_TAG",
    "ObjectWriter",
    "Peek",
    "String",
    "TextWriter",
    "UNKNOWN_VARIANT",
    "Vistor",
    "binary_decode",
    "binary_encode",
    "builder",
    "byte_add",
    "drop_in_place",
    "is_at_content",
    "join_object_with_next_value",
    "json_decode",
    "key",
    "non_terminating",
    "object_writer",
    "push_colon",
    "report_error",
    "to_string",
    "use",
    "MaybeUninit",
    "None",
    "Parser",
    "PhantomData",
    "ToBinary",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "decoder",
    "emplace_from_json",
    "end_json_array",
    "impl",
    "inner",
    "join_parent_json_value_with_next",
    "marker",
    "new_field_visitor",
    "new_unchecked",
    "offset_of",
    "phantom",
    "push",
    "snapshot",
    "temp_flatten",
    "uninit",
    "FromJson",
    "Kind",
    "ObjectSchema",
    "Self",
    "Some",
    "__TEMP",
    "__schema_inner",
    "break",
    "else",
    "for",
    "json_encode",
    "message",
    "push_comma",
    "temp2",
    "type",
    "where",
    "DecodeError",
    "at_content",
    "decode",
    "encoder",
    "schema",
    "start_json_object",
    "success",
    "NonNull",
    "_err",
    "const",
    "flatten_visitor",
    "if",
    "mem",
    "push_str",
    "temp",
    "write",
    "fn",
    "end_json_object",
    "ToJson",
    "variant",
    "cast",
    "match",
    "ptr",
    "self",
    "unsafe",
    "json_encode__jsony",
    "_",
    "__internal",
    "err",
    "value",
    "as",
    "dst",
    "Ok",
    "json",
    "return",
    "std",
    "mut",
    "Err",
    "parser",
    "let",
    "out",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 15;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new('.', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('\'', Spacing::Joint),
        Punct::new('=', Spacing::Joint),
        Punct::new('-', Spacing::Joint),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new('|', Spacing::Alone),
        Punct::new(';', Spacing::Alone),
        Punct::new('*', Spacing::Alone),
    ]
}
