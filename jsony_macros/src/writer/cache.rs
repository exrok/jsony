use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"~\x03\x07\n\t\x01\x95\x01\x02\xa5b{\t\x05\xbf\n\t$\n\t\x13\x03\x07\x0e\x01\x8c\x9b]\x04\x00\xb2\xa5\x80\xbc\t\n\t\xbd\n\t\xae\n\t\xa2\x03\xc7\x01\x02\xc2\t\x05\n\t\xc2\n\tt\x03\x07\x0e\x01\x8c\n\t]\xb2\xa5|\xbc\t\n\t\xbd\n\t\xae\n\t\xa2\x03\xc7\x01\x02\xc2\t\x05\xbf\x0e\x01\n\t\xbd\n\tG\n\t\x1d\x03\xc7\x02\x05\x07K\n\t\xc6\n\t\xb9\n\tr\x01\xb2~\n\tu\x95\tu\x02\xa5f\x05\xb4\x02\x9f\t\x05\xbf\n\t\xc6\n\t\x12\n\t\xad\x95\n\t\xad\x02\x9b\x89\x04\n\t\xad\x01\n\t\x89\x00\xa5\xb3\x05\xb4\x02\xc4\t\x05\xbf\xc6\n\t\\\x0e\x01\x8c\n\t\x89\n\tu\x01\n\tf\n\tb\n\t\x17\x03\x07\n\t\xb6\n\t/\n\t\x03\x05\xbf\n\t\xc6\n\t\xc2\n\tt\x03\x07\x02\xb0\x01\n\tc\n\t\xb6\n\t3\n\t\x03\x07\x01\xc7\n\t\xb6\n\t\x16=\t\x02?\t\n\t\xbd\n\t\xa6\n\t\x98\x08\x02\x90\t\n\t\xc6\n\t\xb6\n\t2\n\t\x03\x0b\xae\t\n\t\xbd\n\t\xae\n\t\xa2\x03\xc7\x01\x0b\xc5\xbb\t\xae\r\xb8\xc7\r\xaf\n\t\xc6\n\t\xb6\n\t \n\t\xc6\n\t\xb6\n\t\x1c4\t\x05\x02.\t\x05\x02,\t\x05\xb7\n\t\xc6\n\t\x88\x03\x07\x01\x01\n\t|\rz\xc4\r\xaa\n\t\x92\xb7\n\t\xc6\n\t\xad\x01\n\t\xb3\x05\xb4\r\xc4\rJ\xc7\x00\xc4\r\xa7\xc7\xc4\r}\xc7\xc4\r\xa7\xc7\x00\xb1\x08j\x02\xbb\r:\xc7\xc5\xb0\t\n\t\xc6\n\t\xb9\n\tU\x04j\r\xb3\x00\xc4\rp\xc7\x00\xbb\r\xb3\x00\xc4\r\xa7\xc7\x00\xc4\r\x7f\xc7\x00\xc5\xb0\t\n\t\xc6\n\t\xb9\n\tT\x04\xc4\ri\xc7\x00\xc5`\x04\x0b\x0b\x0e\x01\x00`\xc7\x14\n\t+\xc7\xc4\r\xa1\xc7\x00\xc4\r\xac\xc7\xab\xb2\xa5v\x03\x07\x01\xc7\x0c\x01\n\t\xc6\n\t\xb6\n\t\x9d\x03\x07\n\t\xc6\n\t\xb6\n\t\x9d\n\t\x03\x07\x96\t\x05\xab\x02\x99\t\n\t\xbd\n\t\x97\n\t\x8b\xc5\xbf^\x04\x03\xb7\n\t\xc6\n\t\xb9\n\tW\x01\n\t\x80\xbc\rz\x02\xc2\x02\xc5_\x04v\n\t\x03\x07\r\x90\xbc\x02\xc2\x02\x05\xbf^\x00\xb1\xc5\xc3\x04_\xc1\xc3\r\xb8\n\t\x03\x01\xc7\r\xaf\xc6\n\t\xb6\n\tV-\t\xbc\x02\xa0\tv\n\t\x03\x07\x01\xc7\x02%\t\x02E\t\xc6\n\t\xb6\n\tV\x03\x07\xba\xb4\x06\x01\xc4\r\xac\xc7\x00\x8c\n\t\x89\xc8\x9b\x8d\x00\xc5\xa0\x04\n\t\xc6\n\t\xb6\n\t\x9d\x96\t\xab\x02\x99\t\n\t\xbd\n\t\x97\n\t\x8b\x02\x00\xc5\xbf\xa9\x04\n\t\xbd\n\t\xa6\n\ts\n\t\x03\x8d\x01\n\t\x87\xc7\x00\xc5\xbf\x86\x04\n\t\xbd\n\t\xa6\n\ts\n\t\x03\x01\n\t\x87\xc7\x00\xc5\xbf\x94\x04\x03\n\t\xbd\n\t\xae\n\t\xa2\n\t\x81\x86\rx\xc7\r\xb8\xc7\xc5\xbf\x94\x04\xc6\n\t\xb6\n\t\x1eH\t\x02R\t\x94\x04\xa0\r\x90\xa9\rx\xc7\r\xb8\xc7\x02\xc2\x02\x9e\x05\xbf\x94\xc5\x9a\x04\xa9\ry\xc7\x00\xbc\r\xb8\n\t\x03\t\x9a\r\t\x86\ry\xc7\x02\x8f\x07\xa8\x00\xc5\xbf\xa9\x04\n\t\xbd\n\t\xa6\n\ts\n\t\x03\x8d\x01\n\t\x87\xc7\x00\xb1\xc5\xc3\x02\xc2\x02\x8a\x02\xc5g\x04\xb2\x05\x0f\xb5\xb7\x0f\xabL\x00\xc5\x82\x04\xba\x03\xb7\n\t\xc6\n\tP\n\t\x18\x01\n\t6\x05\xbf\xc2\r#\r*\x02g\x06\x01\xbb\x02\xc3\x06\x01\xc1\xc3\xb1\x08\xa4\x05\n\t\xc6\n\t\xc2\n\tX\x04\xc2\r\x84\xc7\xba\xc2\rO\xc7\xc5\xbb\x04\xba\xb5\xb0\x06\x01\xb1\xa4\t\x82\xba\xc2\rn\xc7\x05\xc6\n\t\x93\n\t\x1a\x02\xbe\xb5\x04l\x00)\x00\xc5\xb5\x04\xb5\rQ\xc7\x00\xc2\rD\x00\xc1\xc3\x05\n\t\xc6\n\t\x93\n\t\x1f\xc5\x85\x04\xc2\r\x85\xc7\x00\x07\xa8\t\xc2\rF\x05\x85\x05\n\t\xc6\n\t\xb9\n\trk\t\xc5\xa4\t&\x00\xc5\xb5\x04\xba\xc2\r\xbb\x02h\xa4\x04h\x00\xbb\xc5\xbe\xc7\x91\x05\n\t\xc6\n\t\x93\n\t\x15\x07\xa8\t<\xc2\rd\xc7\xba\xc2\rd\xc7\x06\x01\xc1\xbe\x02\xc0\x06\x01\xbd\n\t\xae\n\te\n\t\x03\xbc\r\xb8\xc7\ra\xc7\x00\xc1\xc0\xc5\xc0\x04\xba\xc2\rn\xc7\x05\xc6\n\t\x93\n\t\x19\x00\xbd\n\t\xae\n\te\n\t\x03\x00\xc1\xc0\x00\xba\xc2\r@\xc7\n\t\xc6\n\t\xc2\n\tZ\n\t\x1b\n\t\xc6\n\t\xc2\n\tZ\n\t[\x06\x01\xba\xb2\xc2\rC\xc7\x00\xc1\xbe\x05\xc6\n\t\xb9\n\tr\n\t\x88\x01\n\t|\x9f\r\x83\xba{\r\'\xc7(\n\tB\xab\xb0\t\xc7\x04\rA\r}\xc7\x00\n\t\xc6\n\t\xb9\n\t!\n\t>\n\t\xc6\n\t\xb9\n\tY\n\tm\n\t\xc6\n\t\xb9\n\t\x11\n\tm\r\x7f\xc7\x00\xc5\xb0\t\n\t\xc6\n\t\xb9\n\t\x10\x04\r;\xc7\x00q\n\t\xc6\n\t\xad\x00\xc5\xbfo\t\x05\xbf\n\t\xc6\n\t\xb9\n\tY\x04\x04o\r8\xc7\x00\rI\xc7\x00[\n\t5q\n\t\xc6\n\t\xad\x00\xc5\xbfw\x04\xc6\n\t\\\n\tS\x04\x05\xbfw\x00w\r9\xc7";
pub const IDENT_SIZE: usize = 183;
static NAMES: &[&str] = &[
    "AlwaysArray",
    "ArrayWriter",
    "BytesWriter",
    "Decoder",
    "Default",
    "EMPTY_OBJECT_FOR_EXTERNALLY_TAGGED_ENUM",
    "Field",
    "FromBinary",
    "FromText",
    "MULTIPLE_FIELDS_FOR_EXTERNALLY_TAGGED_ENUM",
    "NO_FIELD_MATCHED_AN_ENUM_VARIANT",
    "Object",
    "ObjectSchemaInner",
    "Result",
    "SkipFieldVisitor",
    "UNKNOWN_VARIANT",
    "UnsafeReturn",
    "ValueWriter",
    "allow",
    "at",
    "binary",
    "bitset",
    "bool",
    "byte",
    "clippy",
    "continue",
    "ctx",
    "default",
    "defaults",
    "destination",
    "drops",
    "emplace_json_for_with_attribute",
    "enter_object",
    "enter_seen_object",
    "erased_drop_in_place",
    "erased_emplace_from_json",
    "fields",
    "from",
    "from_text",
    "in",
    "inner_writer",
    "into_string",
    "iter",
    "join_array_with_next_value",
    "loop",
    "name",
    "new",
    "offset",
    "peek",
    "push_unchecked_ascii",
    "question_mark",
    "read_seen_string",
    "report_error",
    "required",
    "restore_for_retry",
    "result",
    "skipped_field",
    "smart_object_comma",
    "start_json_array",
    "static",
    "str",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "take_string",
    "text",
    "to_string",
    "visitor",
    "with_capacity",
    "AlwaysObject",
    "AlwaysString",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "MISSING_CONTENT_TAG",
    "ObjectWriter",
    "Peek",
    "String",
    "TextWriter",
    "Visitor",
    "__flatten_visitor_jsony",
    "__result",
    "__scope_jsony",
    "as_mut",
    "decode_binary",
    "decode_json",
    "discard_remaining_object_fields",
    "drop_in_place",
    "encode_binary",
    "erased",
    "is_at_content",
    "join_object_with_next_value",
    "key",
    "message",
    "next_field",
    "non_terminating",
    "object_step",
    "object_writer",
    "push_colon",
    "use",
    "DecodeError",
    "MaybeUninit",
    "Parser",
    "ToBinary",
    "__schema_inner",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "byte_add",
    "decoder",
    "emplace_from_json",
    "end_json_array",
    "impl",
    "join_parent_json_value_with_next",
    "new_field_visitor",
    "new_unchecked",
    "other_tag",
    "push",
    "skip_value",
    "snapshot",
    "temp_flatten",
    "uninit",
    "FromJson",
    "Kind",
    "None",
    "PhantomData",
    "Self",
    "__TEMP",
    "automatically_derived",
    "break",
    "decode",
    "else",
    "encode_json",
    "error",
    "flatten_visitor",
    "for",
    "inner",
    "marker",
    "offset_of",
    "phantom",
    "temp2",
    "type",
    "where",
    "ObjectSchema",
    "Some",
    "encoder",
    "schema",
    "start_json_object",
    "NonNull",
    "_err",
    "at_content",
    "fn",
    "mem",
    "push_comma",
    "success",
    "temp",
    "push_str",
    "const",
    "end_json_object",
    "ToJson",
    "ptr",
    "write",
    "_",
    "if",
    "unsafe",
    "encode_json__jsony",
    "self",
    "variant",
    "__internal",
    "as",
    "cast",
    "json",
    "match",
    "value",
    "dst",
    "std",
    "Ok",
    "mut",
    "err",
    "return",
    "parser",
    "Err",
    "out",
    "let",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 16;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new(';', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Joint),
        Punct::new('\'', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('|', Spacing::Alone),
        Punct::new('#', Spacing::Joint),
        Punct::new('.', Spacing::Alone),
        Punct::new('-', Spacing::Joint),
        Punct::new('*', Spacing::Alone),
    ]
}
