use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"z\x03\x07\n\t\x02\x8e\x02\x01\xa0ax\t\x05\xbb\n\t\"\n\t\x13\x03\x07\x0e\x02\x85\x95\\\x04\x00\xae\xa0|\xb4\t\n\t\xb7\n\t\xa8\n\t\x9d\x03\xc1\x02\x01\xbc\t\x05\n\t\xbc\n\tq\x03\x07\x0e\x02\x85\n\t\\\xae\xa0c\xb4\t\n\t\xb7\n\t\xa8\n\t\x9d\x03\xc1\x02\x01\xbc\t\x05\xbb\x0e\x02\n\t\xb7\n\tF\n\t\x1a\x03\xc1\x01\x05\x07J\n\t\xc0\n\t\xb6\n\t\x97\x02\xaez\n\tr\x8e\tr\x01\xa0d\x05\xad\x01\x99\t\x05\xbb\n\t\xc0\n\t\x12\n\t\xa7\x8e\n\t\xa7\x01\x95\x83\x04\n\t\xa7\x02\n\t\x83\x00\xa0\xac\x05\xad\x01\xbe\t\x05\xbb\xc0\n\t[\x0e\x02\x85\n\t\x83\n\tr\x02\n\td\n\ta\n\t\x16\x03\x07\n\t\xb3\n\t.\n\t\x03\x05\xbb\n\t\xc0\n\t\xbc\n\tq\x03\x07\x01\xab\x02\n\tb\n\t\xb3\n\t2\n\t\x03\x07\x02\xc1\n\t\xb3\n\t\x15;\t\x01>\t\n\t\xb7\n\t\xa1\n\t\x92\x08\x01\x8a\t\n\t\xc0\n\t\xb3\n\t1\n\t\x03\x0c\xa8\t\n\t\xb7\n\t\xa8\n\t\x9d\x03\xc1\x02\x0c\xbf\xb5\t\xa8\r\xb1\xc1\r\xa9\n\t\xc0\n\t\xb3\n\t\x1d\n\t\xc0\n\t\xb3\n\t\x193\t\x05\x01-\t\x05\x01)\t\x05\xb0\n\t\xc0\n\tn\x03\x07\x02\x02\n\tc\rw\xbe\r\xa4\n\t\x8c\xb0\n\t\xc0\n\t\xa7\x02\n\t\xac\x05\xad\r\xbe\rI\xc1\x00\xbe\r\xa2\xc1\xbe\ry\xc1\xbe\r\xa2\xc1\x00\xaa\x08h\x01\xb5\r9\xc1\xbf\xab\t\n\t\xc0\n\t\xb6\n\tT\x04h\r\xac\x00\xbe\rk\xc1\x00\xb5\r\xac\x00\xbe\r\xa2\xc1\x00\xbe\r{\xc1\x00\xbf\xab\t\n\t\xc0\n\t\xb6\n\tS\x04\xbe\rg\xc1\x00\xbf_\x04\x0c\x0c\x0e\x02\x00_\xc1\x14\n\t(\xc1\xbe\r\x9b\xc1\x00\xbe\r\xa6\xc1\xa5\xae\xa0s\x03\x07\x02\xc1\x0b\x02\n\t\xc0\n\t\xb3\n\t\x98\x03\x07\n\t\xc0\n\t\xb3\n\t\x98\n\t\x03\x07\x8f\t\x05\xa5\x01\x93\t\n\t\xb7\n\t\x90\n\t\x84\xbf\xbb]\x04\x03\xb0\n\t\xc0\n\t\xb6\n\tV\x02\n\t|\xb4\rw\x01\xbc\x01\xbf^\x04s\n\t\x03\x07\r\x8a\xb4\x01\xbc\x01\x05\xbb]\x00\xaa\xbf\xbd\x04^\xba\xbd\r\xb1\n\t\x03\x02\xc1\r\xa9\xc0\n\t\xb3\n\tU*\t\xb4\x01\x9a\ts\n\t\x03\x07\x02\xc1\x01#\t\x01D\t\xc0\n\t\xb3\n\tU\x03\x07\xb2\xad\x06\x02\xbe\r\xa6\xc1\x00\x85\n\t\x83\xc2\x95\x87\x00\xbf\x9a\x04\n\t\xc0\n\t\xb3\n\t\x98\x8f\t\xa5\x01\x93\t\n\t\xb7\n\t\x90\n\t\x84\x01\x00\xbf\xbb\xa3\x04\n\t\xb7\n\t\xa1\n\to\n\t\x03\x87\x02\n\t\x82\xc1\x00\xbf\xbb\x81\x04\n\t\xb7\n\t\xa1\n\to\n\t\x03\x02\n\t\x82\xc1\x00\xbf\xbb\x8d\x04\x03\n\t\xb7\n\t\xa8\n\t\x9d\n\t}\x81\ru\xc1\r\xb1\xc1\xbf\xbb\x8d\x04\xc0\n\t\xb3\n\t\x1bG\t\x01Q\t\x8d\x04\x9a\r\x8a\xa3\ru\xc1\r\xb1\xc1\x01\xbc\x01\x86\x05\xbb\x8d\xbf\x94\x04\xa3\rv\xc1\x00\xb4\r\xb1\n\t\x03\t\x94\r\t\x81\rv\xc1\x01\x89\x07\x9c\x00\xbf\xbb\xa3\x04\n\t\xb7\n\t\xa1\n\to\n\t\x03\x87\x02\n\t\x82\xc1\x00\xaa\xbf\xbd\x01\xbc\x01p\x01\xbfe\x04\xae\x05\x0f\xaf\xb0\x0f\xa5K\x00\xbf~\x04\xb2\x03\xb0\n\t\xc0\n\tO\n\t\x17\x02\n\t5\x05\xbb\xbc\r!\r\'\x01e\x06\x02\xb5\x01\xbd\x06\x02\xba\xbd\xaa\x08\x9f\x05\n\t\xc0\n\t\xbc\n\tW\x04\xbc\rl\xc1\xb2\xbc\rN\xc1\xbf\xb5\x04\xb2\xaf\xab\x06\x02\xaa\x9f\t~\xbf\xaf\x04\xaf\rP\xc1\x00\xbc\rC\x00\xba\xbd\x05\n\t\xc0\n\t\xbc\n\t\x1c\xbf\x80\x04\xbc\r\x80\xc1\x00\x07\x9c\t\xbc\rE\x05\x80\x05\n\t\xc0\n\t\xb6\n\t\x97\x91\t\xbf\x9f\t$\x00\xbf\xaf\x04\xb2\xbc\r\xb5\x01f\x9f\x04f\x00\xb5\xbf\xb8\xc1\x8b\x05\xc0\n\t\xb6\n\t\x97\xbc\r+\xc1\xbf\xb9\x04\xb2\xbc\r=\xc1\xba\xb8\x01\xb8\x00\xb7\n\t\xa8\n\t,\n\t\x03\xb4\r\xb1\xc1\r \xc1\x00\xba\xb9\x00\xb2\xbc\r?\xc1\n\t\xc0\n\t\xbc\n\tY\n\t\x18\n\t\xc0\n\t\xbc\n\tY\n\tZ\x06\x02\xb2\xae\xbc\rB\xc1\x00\xba\xb8\x99\r\x7f\xb2x\r%\xc1&\n\tA\xa5\xab\t\xc1\x04\r@\ry\xc1\x00\n\t\xc0\n\t\xb6\n\t\x1e\n\t<\n\t\xc0\n\t\xb6\n\tX\n\ti\n\t\xc0\n\t\xb6\n\t\x11\n\ti\r{\xc1\x00\xbf\xab\t\n\t\xc0\n\t\xb6\n\t\x10\x04\r:\xc1\x00m\n\t\xc0\n\t\xa7\x00\xbf\xbbj\t\x05\xbb\n\t\xc0\n\t\xb6\n\tX\x04`\x04j\r7\xc1\x00`\rH\xc1\x00Z\n\t4m\n\t\xc0\n\t\xa7\x00\xbf\xbbt\x04\xc0\n\t[\n\tR\x04\x05\xbbt\x00t\r8\xc1";
pub const IDENT_SIZE: usize = 177;
static NAMES: &[&str] = &[
    "AlwaysArray",
    "ArrayWriter",
    "BytesWriter",
    "Decoder",
    "Default",
    "Field",
    "FromBinary",
    "FromText",
    "Object",
    "ObjectSchemaInner",
    "Result",
    "SkipFieldVisitor",
    "UNKNOWN_VARIANT",
    "UnsafeReturn",
    "ValueWriter",
    "allow",
    "as_mut",
    "at",
    "binary",
    "bitset",
    "bool",
    "byte",
    "clippy",
    "ctx",
    "default",
    "defaults",
    "destination",
    "discard_remaining_object_fields",
    "drop_in_place",
    "drops",
    "emplace_json_for_with_attribute",
    "enter_object",
    "enter_seen_object",
    "erased_drop_in_place",
    "erased_emplace_from_json",
    "fields",
    "from",
    "from_text",
    "in",
    "inner_writer",
    "into_string",
    "iter",
    "join_array_with_next_value",
    "name",
    "new",
    "object_step",
    "offset",
    "peek",
    "push_unchecked_ascii",
    "question_mark",
    "read_seen_string",
    "report_error",
    "required",
    "restore_for_retry",
    "result",
    "skipped_field",
    "smart_object_comma",
    "start_json_array",
    "static",
    "str",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "take_string",
    "text",
    "to_string",
    "visitor",
    "with_capacity",
    "AlwaysObject",
    "AlwaysString",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "MISSING_CONTENT_TAG",
    "ObjectWriter",
    "Peek",
    "String",
    "TextWriter",
    "Vistor",
    "__flatten_visitor_jsony",
    "__result",
    "__scope_jsony",
    "builder",
    "decode_binary",
    "decode_json",
    "emplace_from_json",
    "encode_binary",
    "erased",
    "is_at_content",
    "join_object_with_next_value",
    "key",
    "non_terminating",
    "object_writer",
    "push_colon",
    "skip_value",
    "use",
    "FromJson",
    "MaybeUninit",
    "None",
    "Parser",
    "ToBinary",
    "__schema_inner",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "byte_add",
    "decoder",
    "end_json_array",
    "impl",
    "join_parent_json_value_with_next",
    "new_field_visitor",
    "new_unchecked",
    "other_tag",
    "push",
    "snapshot",
    "temp_flatten",
    "uninit",
    "Kind",
    "PhantomData",
    "Self",
    "Some",
    "__TEMP",
    "automatically_derived",
    "break",
    "decode",
    "else",
    "encode_json",
    "flatten_visitor",
    "for",
    "inner",
    "marker",
    "message",
    "offset_of",
    "phantom",
    "temp2",
    "type",
    "where",
    "DecodeError",
    "ObjectSchema",
    "encoder",
    "schema",
    "start_json_object",
    "success",
    "NonNull",
    "_err",
    "at_content",
    "fn",
    "mem",
    "push_comma",
    "temp",
    "push_str",
    "const",
    "end_json_object",
    "ToJson",
    "ptr",
    "write",
    "if",
    "_",
    "encode_json__jsony",
    "self",
    "unsafe",
    "variant",
    "as",
    "cast",
    "match",
    "__internal",
    "dst",
    "value",
    "json",
    "std",
    "Ok",
    "err",
    "return",
    "mut",
    "parser",
    "Err",
    "out",
    "let",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 16;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new(';', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Joint),
        Punct::new('\'', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('#', Spacing::Joint),
        Punct::new('|', Spacing::Alone),
        Punct::new('.', Spacing::Alone),
        Punct::new('-', Spacing::Joint),
        Punct::new('*', Spacing::Alone),
    ]
}
