use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"f\x03\x06\n\t\x01e\x01\x02\x8aJa\t\x04\x9f\n\t\x1d\n\t\x11\x03\x06\x08\x01s{I\x05\r\x95\x8ai\x99\t\n\t\x9d\n\t\x94\n\t\x83\x03\xa4\x01\x02\xa2\t\x04\n\t\xa2\n\tD\x03\x06\x08\x01s\n\tI\x95\x8ac\x99\t\n\t\x9d\n\t\x94\n\t\x83\x03\xa4\x01\x02\xa2\t\x04\x9f\x08\x01\n\t\x9d\n\t8\n\t\x17\x03\xa4\x02\x04\x06;\n\t\xa3\n\t\x9b\n\t}\x01\x95f\n\t]e\t]\x02\x8aK\x04\x8e\x02\x7f\t\x04\x9f\x1b\x03?\x01\n\t\x96e\n\t\x96\x02{q\x05\n\t\x96\x01\n\tq\r\x8a\x92\x04\x8e\x02\xa1\t\x04\x9f\xa3\n\tG\x08\x01s\n\tq\n\t]\x01\n\tK\x01\n\tJ\n\tp\x03\x06\n\t\x13\x03\x06\n\t\x8f\n\t(\x01\n\tc\n\t\x8f\n\t\x12/\t\x022\t\n\t\x9d\n\t\x87\n\tk\x0b\x02~\t\x9d\n\t\x87\n\t>\x9d\n\t\x94\n\tN\n\t\x03\x01\x9c\x95\x8a\x0e\x9f\x0c\x94\t\n\t\x9d\n\t\x94\n\t\x83\x03\xa4\x01\x0c\xa0\x8d\t\x94\x00\x90\xa4\x00\x89\n\t\xa3\n\t\x8f\n\t\x19\n\t\xa3\n\t\x8f\n\t\x15)\t\x04\x02%\t\x04\x02\"\t\x04\xa0\x9fx\x05\x03\x9c\n\t\xa3\n\t\x9b\n\tB\x01\n\ti\x99\x00M\x02\xa2\x02\rv\n\t\x03\x06\x01\xa4\x00~\x99\x02\xa2\x02t\x04\x9fx\x9c\n\t\xa3\n\tp\x03\x06\x01\x01\n\tc\xa1\x00\x8c\x9c\n\t\xa3\n\t\x96\x01\n\t\x92\x04\x8e\x00\xa1\x00:\xa4\r\xa1\x00V\xa4\xa1\x00d\xa4\xa1\x00\x81\xa4\r\r\x03\xa1\x00\x86\xa4\x85\x98\t\xa4\x05\x85\x95\x8av\x03\x06\x01\xa4\x08\x01\n\t\xa3\n\t\x8f\n\tr\x03\x06g\t\x04\x85\x02l\t\n\t\x9d\n\th\n\t\\\x99\x02\xa2\x02[\xa3\n\t\x8f\n\tA#\t\x99\x02\x80\tv\n\t\x03\x06\x01\xa4\x02\x1e\t\x027\t\xa3\n\t\x8f\n\tA\x03\x06\x93\x8e\x07\x01\xa1\x00\x86\xa4\rs\n\tq\xa5{u\r\xa0\x80\x05\n\t\xa3\n\t\x8f\n\trg\t\x85\x02l\t\n\t\x9d\n\th\n\t\\\x02\r\xa0\x9f\x88\x05\n\t\x9d\n\t\x87\n\tZ\n\t\x03u\x01\n\to\xa4\r\xa0\x9fn\x05\n\t\x9d\n\t\x87\n\tZ\n\t\x03\x01\n\to\xa4\r\xa0\x9fx\x05\x03\n\t\x9d\n\t\x94\n\t\x83\n\tjn\x00_\xa4\x00\x90\xa4\rO\xa0\x9e\x05\x80\x00~\x88\x00_\xa4\x00\x90\xa4\x9a\x9e\xa0z\x05\x88\x00`\xa4\r\x99\x00\x90\n\t\x03\x01\xa4\x00\x89\tz\x00\tn\x00`\xa4\x02w\x06\x82\r\xa0\x9f\x88\x05\n\t\x9d\n\t\x87\n\tZ\n\t\x03u\x01\n\to\xa4\rO\xa0\x9e\x02\xa2\x02[\x02\x93\x03\x01\x01\n\t!\x02\x9e\xa0Q\x05\xa2\x00P\r\xa0R\x05\xa2\x00W\r\x06\x82\t\xa2\x00P\x05Q\r\xa2\x00W\x05R\r\x04\n\t\xa3\n\t\x9b\n\t}y\t\xa2\x00 \xa4\r\x97\xa0\x8b\x05\x93\xa2\x00\x07\x01\x8d\x02\x9e\x07\x01\x9a\x9e\xa0\x97\xa4b\x04\xa3\n\t\x9b\n\t}\x93\x8b\x98\x07\x01\xa2\x00X\x8b\x00Y\xa4\r\x9a\x9e\x04\n\t\xa3\n\t\xa2\n\tH\xa2\x00$\xa4\xa0\x91\x05\x93\xa2\x001\xa4\x9a\x97\x02\x97\r\x9d\n\t\x94\n\tN\n\t\x03\x99\x00\x90\xa4\x00\x1c\xa4\r\x9a\x91\r\x93\xa2\x003\xa4\n\t\xa3\n\t\xa2\n\tE\n\t\x14\n\t\xa3\n\t\xa2\n\tE\n\tF\x07\x01\x93\xa2\x006\xa4\xa0\x8d\x05\x93\x8b\r\x9a\x97\x7f\x00m\x93a\x00\x1f\xa4\x004\xa4\r\x00V\xa4\r\x005\x00d\xa4\r\n\t\xa3\n\t\x9b\n\t\x1a\n\t0\n\t\xa3\n\t\x9b\n\tC\n\tT\n\t\xa3\n\t\x9b\n\t\x10\n\tT\xa0\x98\t\n\t\xa3\n\t\x9b\n\t\x18\x05\x03\x98\x9c\n\t\xa3\n\t\x96\x01\n\t\x92\x00S\xa4\r\xa0\x98\t\n\t\xa3\n\t\x9b\n\t\x16\x05\x03\x98\x9c\n\t\xa3\n\t\x96\x01\n\t\x92\x00.\xa4\r\x00S\xa4\r\xa0\x98\t\n\t\xa3\n\t\x9b\n\t\x0f\x05\x03\x98\x9c\n\t\xa3\n\t\x96\x01\n\t\x92\x00-\xa4\r\xa0\x9fU\t\x04\x9f\n\t\xa3\n\t\x9b\n\tC\x05L\x05U\x00+\xa4\rL\x009\xa4\rF\n\t*\xa0\x9f^\x05\xa3\n\tG\n\t@\x05\x04\x9f^\r^\x00,\xa4";
pub const IDENT_SIZE: usize = 149;
static NAMES: &[&str] = &[
    "ArrayValue",
    "ArrayWriter",
    "Decoder",
    "Field",
    "FromBinary",
    "Object",
    "ObjectSchemaInner",
    "ObjectValue",
    "Result",
    "StringValue",
    "UnsafeReturn",
    "ValueWriter",
    "Vec",
    "as_mut",
    "binary",
    "bitset",
    "byte",
    "clear_error",
    "decode_json",
    "defaults",
    "destination",
    "discard_remaining_object_fields",
    "drops",
    "enter_object",
    "enter_seen_object",
    "erase",
    "fields",
    "from",
    "inner_writer",
    "into_string",
    "join_array_with_next_value",
    "join_object_with_next_value",
    "name",
    "new",
    "object_step",
    "offset",
    "peek",
    "push_colon",
    "push_unchecked_ascii",
    "read_seen_string_unescaped",
    "required",
    "result",
    "smart_object_comma",
    "start_json_array",
    "static",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "transmute",
    "u8",
    "with_capacity",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "ObjectWriter",
    "Parser",
    "Peek",
    "String",
    "TextWriter",
    "UNKNOWN_VARIANT",
    "Vistor",
    "binary_decode",
    "binary_encode",
    "builder",
    "byte_add",
    "drop_in_place",
    "if",
    "index",
    "initial_index",
    "initial_remaining_depth",
    "join_parent_json_value_with_next",
    "non_terminating",
    "object_writer",
    "push_comma",
    "remaining_depth",
    "report_error",
    "to_string",
    "MaybeUninit",
    "None",
    "PhantomData",
    "ToBinary",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "decoder",
    "else",
    "emplace_from_json",
    "end_json_array",
    "for",
    "impl",
    "inner",
    "marker",
    "new_field_visitor",
    "new_unchecked",
    "offset_of",
    "phantom",
    "push",
    "temp_flatten",
    "uninit",
    "FromJson",
    "Kind",
    "ObjectSchema",
    "Self",
    "Some",
    "__TEMP",
    "__schema_inner",
    "break",
    "flatten_visitor",
    "message",
    "temp2",
    "type",
    "where",
    "DecodeError",
    "decode",
    "encoder",
    "schema",
    "start_json_object",
    "success",
    "NonNull",
    "_err",
    "const",
    "end_json_object",
    "mem",
    "temp",
    "write",
    "fn",
    "variant",
    "push_str",
    "value",
    "self",
    "__internal",
    "cast",
    "err",
    "jsonify_into",
    "match",
    "ptr",
    "unsafe",
    "ToJson",
    "Ok",
    "_",
    "dst",
    "return",
    "json",
    "as",
    "std",
    "Err",
    "mut",
    "let",
    "out",
    "parser",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let mut cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 15;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new('.', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('\'', Spacing::Joint),
        Punct::new('=', Spacing::Joint),
        Punct::new('-', Spacing::Joint),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new('|', Spacing::Alone),
        Punct::new(';', Spacing::Alone),
        Punct::new('*', Spacing::Alone),
    ]
}
