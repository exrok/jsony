use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"u\x03\x07\n\t\x01\x87\x01\x02\x9a[s\t\x05\xb5\n\t\x1f\n\t\x12\x03\x07\x0c\x01\x80\x8fW\x04\x00\xa8\x9aw\xae\t\n\t\xb1\n\t\xa2\n\t\x97\x03\xbb\x01\x02\xb6\t\x05\n\t\xb6\n\tl\x03\x07\x0c\x01\x80\n\tW\xa8\x9a^\xae\t\n\t\xb1\n\t\xa2\n\t\x97\x03\xbb\x01\x02\xb6\t\x05\xb5\x0c\x01\n\t\xb1\n\tA\n\t\x19\x03\xbb\x02\x05\x07E\n\t\xba\n\t\xb0\n\t\x91\x01\xa8u\n\tm\x87\tm\x02\x9a\\\x05\xa7\x02\x93\t\x05\xb5\n\t\xba\n\t\x11\n\t\xa1\x87\n\t\xa1\x02\x8f~\x04\n\t\xa1\x01\n\t~\x00\x9a\xa6\x05\xa7\x02\xb8\t\x05\xb5\xba\n\tV\x0c\x01\x80\n\t~\n\tm\x01\n\t\\\n\t[\n\t\x15\x03\x07\n\t\xad\n\t*\n\t\x03\x05\xb5\n\t\xba\n\t\xb6\n\tl\x03\x07\x02\xa5\x01\n\tb\n\t\xad\n\t.\n\t\x03\x07\x01\xbb\n\t\xad\n\t\x147\t\x02:\t\n\t\xb1\n\t\x9b\n\t\x8c\x08\x02\x84\t\n\t\xba\n\t\xad\n\t-\n\t\x03\x0b\xa2\t\n\t\xb1\n\t\xa2\n\t\x97\x03\xbb\x01\x0b\xb9\xaf\t\xa2\r\xab\xbb\r\xa3\n\t\xba\n\t\xad\n\t\x1c\n\t\xba\n\t\xad\n\t\x18/\t\x05\x02)\t\x05\x02%\t\x05\xaa\n\t\xba\n\ti\x03\x07\x01\x01\n\t^\rr\xb8\r\x9e\n\t\x89\xaa\n\t\xba\n\t\xa1\x01\n\t\xa6\x05\xa7\r\xb8\rD\xbb\x00\xb8\r\x9c\xbb\xb8\rt\xbb\xb8\r\x9c\xbb\x00\xa4\x08c\x02\xaf\r5\xbb\xb9\xa5\t\n\t\xba\n\t\xb0\n\tO\x04c\r\xa6\x00\xb8\rf\xbb\x00\xaf\r\xa6\x00\xb8\r\x9c\xbb\x00\xb8\rv\xbb\x00\xb9\xa5\t\n\t\xba\n\t\xb0\n\tN\x04\xb8\ra\xbb\x00\xb9Z\x04\x0b\x0b\x0c\x01\x00Z\xbb\x13\n\t$\xbb\xb8\r\x95\xbb\x00\xb8\r\xa0\xbb\x9f\xa5\t\xbb\x04\x9f\xa8\x9an\x03\x07\x01\xbb\x0c\x01\n\t\xba\n\t\xad\n\t\x92\x03\x07\n\t\xba\n\t\xad\n\t\x92\n\t\x03\x07\x88\t\x05\x9f\x02\x8d\t\n\t\xb1\n\t\x8a\n\t\x7f\xb9\xb5X\x04\x03\xaa\n\t\xba\n\t\xb0\n\tQ\x01\n\tw\xae\rr\x02\xb6\x02\xb9Y\x04n\n\t\x03\x07\r\x84\xae\x02\xb6\x02\x05\xb5X\x00\xa4\xb9\xb7\x04Y\xb4\xb7\r\xab\n\t\x03\x01\xbb\r\xa3\xba\n\t\xad\n\tP&\t\xae\x02\x94\tn\n\t\x03\x07\x01\xbb\x02 \t\x02?\t\xba\n\t\xad\n\tP\x03\x07\xac\xa7\x06\x01\xb8\r\xa0\xbb\x00\x80\n\t~\xbc\x8f\x82\x00\xb9\x94\x04\n\t\xba\n\t\xad\n\t\x92\x88\t\x9f\x02\x8d\t\n\t\xb1\n\t\x8a\n\t\x7f\x02\x00\xb9\xb5\x9d\x04\n\t\xb1\n\t\x9b\n\tj\n\t\x03\x82\x01\n\t}\xbb\x00\xb9\xb5|\x04\n\t\xb1\n\t\x9b\n\tj\n\t\x03\x01\n\t}\xbb\x00\xb9\xb5\x86\x04\x03\n\t\xb1\n\t\xa2\n\t\x97\n\tx|\rp\xbb\r\xab\xbb\xb9\xb5\x86\x04\xba\n\t\xad\n\t\x1aB\t\x02L\t\x86\x04\x94\r\x84\x9d\rp\xbb\r\xab\xbb\x02\xb6\x02\x81\x05\xb5\x86\xb9\x8e\x04\x9d\rq\xbb\x00\xae\r\xab\n\t\x03\t\x8e\r\t|\rq\xbb\x02\x83\x07\x96\x00\xb9\xb5\x9d\x04\n\t\xb1\n\t\x9b\n\tj\n\t\x03\x82\x01\n\t}\xbb\x00\xa4\xb9\xb7\x02\xb6\x02k\x02\xb9_\x04\xa8\x05\x0e\xa9\xaa\x0e\x9fF\x00\xb9y\x04\xac\x03\xaa\n\t\xba\n\tJ\n\t\x16\x01\n\t1\x05\xb5\xb6\r#\x02_\x06\x01\xaf\x02\xb7\x06\x01\xb4\xb7\xa4\x08\x99\x05\n\t\xba\n\t\xb6\n\tR\x04\xb6\rg\xbb\xac\xb6\rI\xbb\xb9\xaf\x04\xac\xa9\xa5\x06\x01\xa4\x99\ty\xb9\xa9\x04\xa9\rK\xbb\x00\xb6\r>\x00\xb4\xb7\x05\n\t\xba\n\t\xb6\n\t\x1b\xb9{\x04\xb6\r{\xbb\x00\x07\x96\t\xb6\r@\x05{\x05\n\t\xba\n\t\xb0\n\t\x91\x8b\t\xb9\x99\t!\x00\xb9\xa9\x04\xac\xb6\r\xaf\x02`\x99\x04`\x00\xaf\xb9\xb2\xbb\x85\x05\xba\n\t\xb0\n\t\x91\xb6\r\'\xbb\xb9\xb3\x04\xac\xb6\r9\xbb\xb4\xb2\x02\xb2\x00\xb1\n\t\xa2\n\t(\n\t\x03\xae\r\xab\xbb\r\x1e\xbb\x00\xb4\xb3\x00\xac\xb6\r;\xbb\n\t\xba\n\t\xb6\n\tT\n\t\x17\n\t\xba\n\t\xb6\n\tT\n\tU\x06\x01\xac\xa8\xb6\r=\xbb\x00\xb4\xb2\x93\rz\xacs\r\"\xbb\r<\rt\xbb\x00\n\t\xba\n\t\xb0\n\t\x1d\n\t8\n\t\xba\n\t\xb0\n\tS\n\td\n\t\xba\n\t\xb0\n\t\x10\n\td\rv\xbb\x00\xb9\xa5\t\n\t\xba\n\t\xb0\n\t\x0f\x04\r6\xbb\x00h\n\t\xba\n\t\xa1\x00\xb9\xb5e\t\x05\xb5\n\t\xba\n\t\xb0\n\tS\x04]\x04e\r3\xbb\x00]\rC\xbb\x00U\n\t0h\n\t\xba\n\t\xa1\x00\xb9\xb5o\x04\xba\n\tV\n\tM\x04\x05\xb5o\x00o\r4\xbb";
pub const IDENT_SIZE: usize = 172;
static NAMES: &[&str] = &[
    "AlwaysArray",
    "ArrayWriter",
    "BytesWriter",
    "Decoder",
    "Default",
    "Field",
    "FromBinary",
    "FromText",
    "Object",
    "ObjectSchemaInner",
    "Result",
    "SkipFieldVisitor",
    "UNKNOWN_VARIANT",
    "UnsafeReturn",
    "ValueWriter",
    "as_mut",
    "binary",
    "bitset",
    "bool",
    "byte",
    "ctx",
    "default",
    "defaults",
    "destination",
    "discard_remaining_object_fields",
    "drop_in_place",
    "drops",
    "emplace_json_for_with_attribute",
    "enter_object",
    "enter_seen_object",
    "erased_drop_in_place",
    "erased_emplace_from_json",
    "fields",
    "from",
    "from_text",
    "in",
    "inner_writer",
    "into_string",
    "iter",
    "join_array_with_next_value",
    "name",
    "new",
    "object_step",
    "offset",
    "peek",
    "push_unchecked_ascii",
    "read_seen_string",
    "report_error",
    "required",
    "restore_for_retry",
    "result",
    "skipped_field",
    "smart_object_comma",
    "start_json_array",
    "static",
    "str",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "take_string",
    "text",
    "to_string",
    "visitor",
    "with_capacity",
    "AlwaysObject",
    "AlwaysString",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "MISSING_CONTENT_TAG",
    "ObjectWriter",
    "Peek",
    "String",
    "TextWriter",
    "Vistor",
    "__flatten_visitor_jsony",
    "__result",
    "__scope_jsony",
    "binary_decode",
    "binary_encode",
    "builder",
    "emplace_from_json",
    "erased",
    "is_at_content",
    "join_object_with_next_value",
    "json_decode",
    "key",
    "non_terminating",
    "object_writer",
    "push_colon",
    "skip_value",
    "use",
    "FromJson",
    "MaybeUninit",
    "None",
    "Parser",
    "ToBinary",
    "__schema_inner",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "byte_add",
    "decoder",
    "end_json_array",
    "impl",
    "join_parent_json_value_with_next",
    "new_field_visitor",
    "new_unchecked",
    "other_tag",
    "push",
    "snapshot",
    "temp_flatten",
    "uninit",
    "Kind",
    "PhantomData",
    "Self",
    "Some",
    "__TEMP",
    "break",
    "decode",
    "else",
    "flatten_visitor",
    "for",
    "inner",
    "json_encode",
    "marker",
    "message",
    "offset_of",
    "phantom",
    "temp2",
    "type",
    "where",
    "DecodeError",
    "ObjectSchema",
    "encoder",
    "schema",
    "start_json_object",
    "success",
    "NonNull",
    "_err",
    "at_content",
    "fn",
    "mem",
    "push_comma",
    "temp",
    "push_str",
    "const",
    "end_json_object",
    "ToJson",
    "ptr",
    "write",
    "if",
    "_",
    "json_encode__jsony",
    "self",
    "unsafe",
    "variant",
    "as",
    "cast",
    "match",
    "__internal",
    "dst",
    "value",
    "json",
    "std",
    "Ok",
    "err",
    "return",
    "mut",
    "parser",
    "Err",
    "out",
    "let",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 15;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new(';', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Joint),
        Punct::new('\'', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('|', Spacing::Alone),
        Punct::new('-', Spacing::Joint),
        Punct::new('.', Spacing::Alone),
        Punct::new('*', Spacing::Alone),
    ]
}
