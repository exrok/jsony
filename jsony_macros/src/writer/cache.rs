use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"l\x03\x07\n\t\x01\x7f\x01\x02\x93Sj\t\x05\xae\n\t\x1c\n\t\x11\x03\x07\x0c\x01x\x87O\x04\r\x9e\x93n\xa7\t\n\t\xac\n\t\x9d\n\t\x91\x03\xb4\x01\x02\xb0\t\x05\n\t\xb0\n\tb\x03\x07\x0c\x01x\n\tO\x9e\x93V\xa7\t\n\t\xac\n\t\x9d\n\t\x91\x03\xb4\x01\x02\xb0\t\x05\xae\x0c\x01\n\t\xac\n\t;\n\t\x17\x03\xb4\x02\x05\x07@\n\t\xb3\n\t\xaa\n\t\x8a\x01\x9el\n\tc\x7f\tc\x02\x93T\x05\xa1\x02\x8d\t\x05\xae\n\t\xb3\n\t\x10\n\t\x9c\x7f\n\t\x9c\x02\x87v\x04\n\t\x9c\x01\n\tv\r\x93\xa0\x05\xa1\x02\xb1\t\x05\xae\xb3\n\tN\x0c\x01x\n\tv\n\tc\x01\n\tT\n\tS\n\t\x14\x03\x07\n\t\xa6\n\t&\n\t\x03\x05\xae\n\t\xb3\n\t\xb0\n\tb\x03\x07\x02\xa5\x01\n\tY\n\t\xa6\n\t*\n\t\x03\x07\x01\xb4\n\t\xa6\n\t\x132\t\x025\t\n\t\xac\n\t\x94\n\t\x84\x08\x02|\t\n\t\xb3\n\t\xa6\n\t)\n\t\x03\x0b\x9d\t\n\t\xac\n\t\x9d\n\t\x91\x03\xb4\x01\x0b\xb2\xa8\t\x9d\x00\xa2\xb4\x00\x9b\n\t\xb3\n\t\xa6\n\t\x19\n\t\xb3\n\t\xa6\n\t\x16+\t\x05\x02%\t\x05\x02!\t\x05\x9f\n\t\xb3\n\t_\x03\x07\x01\x01\n\tV\x00i\xb1\x00\x98\n\t\x81\x9f\n\t\xb3\n\t\x9c\x01\n\t\xa0\x05\xa1\x00\xb1\x00?\xb4\r\xb1\x00\x95\xb4\xb1\x00k\xb4\xb1\x00\x95\xb4\r\x9a\x08Z\x02\xa8\x000\xb4\xb2\xa5\t\n\t\xb3\n\t\xaa\n\tG\x04Z\x00\xa0\r\xb1\x00]\xb4\r\xa8\x00\xa0\r\xb1\x00\x95\xb4\r\xb1\x00m\xb4\r\xb2\xa5\t\n\t\xb3\n\t\xaa\n\tF\x04\xb1\x00X\xb4\r\xb2R\x04\x0b\x0b\x0c\x01\rR\xb4\x12\n\t \xb4\xb1\x00\x8f\xb4\r\xb1\x00\x99\xb4\x97\xa5\t\xb4\x04\x97\x9e\x93e\x03\x07\x01\xb4\x0c\x01\n\t\xb3\n\t\xa6\n\t\x8b\x03\x07\n\t\xb3\n\t\xa6\n\t\x8b\n\t\x03\x07\x80\t\x05\x97\x02\x85\t\n\t\xac\n\t\x82\n\tw\xb2\xaeP\x04\x03\x9f\n\t\xb3\n\t\xaa\n\tI\x01\n\tn\xa7\x00i\x02\xb0\x02\xb2Q\x04e\n\t\x03\x07\x00|\xa7\x02\xb0\x02\x05\xaeP\r\x9a\xb2\xaf\x04Q\xad\xaf\x00\xa2\n\t\x03\x01\xb4\x00\x9b\xb3\n\t\xa6\n\tH\"\t\xa7\x02\x8e\te\n\t\x03\x07\x01\xb4\x02\x1d\t\x029\t\xb3\n\t\xa6\n\tH\x03\x07\xa3\xa1\x06\x01\xb1\x00\x99\xb4\rx\n\tv\xb5\x87z\r\xb2\x8e\x04\n\t\xb3\n\t\xa6\n\t\x8b\x80\t\x97\x02\x85\t\n\t\xac\n\t\x82\n\tw\x02\r\xb2\xae\x96\x04\n\t\xac\n\t\x94\n\t`\n\t\x03z\x01\n\tu\xb4\r\xb2\xaes\x04\n\t\xac\n\t\x94\n\t`\n\t\x03\x01\n\tu\xb4\r\xb2\xae~\x04\x03\n\t\xac\n\t\x9d\n\t\x91\n\tos\x00g\xb4\x00\xa2\xb4\xb2\xae~\x04\xb3\n\t\xa6\n\t\x18=\t\x02D\t~\x04\x8e\x00|\x96\x00g\xb4\x00\xa2\xb4\x02\xb0\x02y\x05\xae~\xb2\x86\x04\x96\x00h\xb4\r\xa7\x00\xa2\n\t\x03\t\x86\x00\ts\x00h\xb4\x02{\x07\x90\r\xb2\xae\x96\x04\n\t\xac\n\t\x94\n\t`\n\t\x03z\x01\n\tu\xb4\r\x9a\xb2\xaf\x02\xb0\x02a\x02\x9a\x08\x8c\x05\n\t\xb3\n\t\xb0\n\tJ\x02\xaf\x04\xb0\x00<\xb4\xa3\xb0\x00C\xb4\xb2\xa8\x04\xa3\xa4\xa5\x06\x01\xb2\x88\x04\xa4\x00t\xb4\r\xb0\x00q\r\xad\xaf\x05\n\t\xb3\n\t\xb0\n\td\x06\x01\xad\xaf\xb2r\x04\xb0\x00r\xb4\r\x07\x90\t\xb0\x00:\x05r\x05\n\t\xb3\n\t\xaa\n\t\x8a\x83\t\xb2\x8c\t\x1e\r\xb2\xa4\x04\xa3\xb0\x00\xa8\x02W\x8c\x04W\r\xa8\x06\x01\xa8\x02\xb2\xab\xb4}\x05\xb3\n\t\xaa\n\t\x8a\xb2\xa4\x04\xa4\x00t\xb4\r\xb0\x00q\x9a\x8c\xb0\x00#\xb4\xb2\xa9\x04\xa3\xb0\x004\xb4\xad\xab\x02\xab\r\xac\n\t\x9d\n\t$\n\t\x03\xa7\x00\xa2\xb4\x00\x1b\xb4\r\xad\xa9\r\xa3\xb0\x006\xb4\n\t\xb3\n\t\xb0\n\tL\n\t\x15\n\t\xb3\n\t\xb0\n\tL\n\tM\x06\x01\xa3\xb0\x008\xb4\r\xad\xab\x8d\x00p\xa3j\x00\x1f\xb4\x007\x00k\xb4\r\n\t\xb3\n\t\xaa\n\t\x1a\n\t3\n\t\xb3\n\t\xaa\n\tK\n\t[\n\t\xb3\n\t\xaa\n\t\x0f\n\t[\x00m\xb4\r\xb2\xa5\t\n\t\xb3\n\t\xaa\n\t\x0e\x04\x001\xb4\r^\n\t\xb3\n\t\x9c\r\xb2\xae\\\t\x05\xae\n\t\xb3\n\t\xaa\n\tK\x04U\x04\\\x00.\xb4\rU\x00>\xb4\rM\n\t,^\n\t\xb3\n\t\x9c\r\xb2\xaef\x04\xb3\n\tN\n\tE\x04\x05\xaef\rf\x00/\xb4";
pub const IDENT_SIZE: usize = 166;
static NAMES: &[&str] = &[
    "AlwaysArray",
    "ArrayWriter",
    "BytesWriter",
    "Decoder",
    "Default",
    "Field",
    "FromBinary",
    "Object",
    "ObjectSchemaInner",
    "Result",
    "SkipFieldVisitor",
    "UnsafeReturn",
    "ValueWriter",
    "as_mut",
    "binary",
    "bitset",
    "bool",
    "byte",
    "default",
    "defaults",
    "destination",
    "discard_remaining_object_fields",
    "drop_in_place",
    "drops",
    "emplace_json_for_with_attribute",
    "enter_object",
    "enter_seen_object",
    "erased_drop_in_place",
    "erased_emplace_from_json",
    "fields",
    "from",
    "in",
    "inner_writer",
    "into_string",
    "iter",
    "join_array_with_next_value",
    "name",
    "new",
    "object_step",
    "offset",
    "peek",
    "push_unchecked_ascii",
    "read_seen_string_unescaped",
    "required",
    "restore_for_retry",
    "result",
    "skip_value",
    "skipped_field",
    "smart_object_comma",
    "start_json_array",
    "static",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "take_string",
    "visitor",
    "with_capacity",
    "AlwaysObject",
    "AlwaysString",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "MISSING_CONTENT_TAG",
    "ObjectWriter",
    "Peek",
    "String",
    "TextWriter",
    "Vistor",
    "__flatten_visitor_jsony",
    "__result",
    "__scope_jsony",
    "binary_decode",
    "binary_encode",
    "builder",
    "emplace_from_json",
    "is_at_content",
    "join_object_with_next_value",
    "json_decode",
    "key",
    "non_terminating",
    "object_writer",
    "push_colon",
    "use",
    "FromJson",
    "MaybeUninit",
    "None",
    "Parser",
    "ToBinary",
    "UNKNOWN_VARIANT",
    "__schema_inner",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "byte_add",
    "decoder",
    "end_json_array",
    "impl",
    "join_parent_json_value_with_next",
    "new_field_visitor",
    "new_unchecked",
    "push",
    "report_error",
    "snapshot",
    "temp_flatten",
    "to_string",
    "uninit",
    "Kind",
    "PhantomData",
    "Self",
    "Some",
    "__TEMP",
    "break",
    "decode",
    "else",
    "flatten_visitor",
    "for",
    "inner",
    "json_encode",
    "marker",
    "message",
    "offset_of",
    "phantom",
    "temp2",
    "type",
    "unknown_variant",
    "where",
    "DecodeError",
    "ObjectSchema",
    "at_content",
    "encoder",
    "schema",
    "start_json_object",
    "success",
    "NonNull",
    "_err",
    "fn",
    "mem",
    "push_comma",
    "temp",
    "const",
    "push_str",
    "end_json_object",
    "if",
    "write",
    "ToJson",
    "ptr",
    "unsafe",
    "as",
    "json_encode__jsony",
    "self",
    "cast",
    "match",
    "variant",
    "_",
    "__internal",
    "dst",
    "value",
    "err",
    "json",
    "Ok",
    "std",
    "return",
    "mut",
    "Err",
    "parser",
    "out",
    "let",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 14;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new('.', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Joint),
        Punct::new('\'', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('|', Spacing::Alone),
        Punct::new('-', Spacing::Joint),
        Punct::new(';', Spacing::Alone),
    ]
}
