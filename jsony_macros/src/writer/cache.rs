use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"e\x03\x07\n\t\x02y\x02\x01\x90Nc\t\x04\xa9\n\t\x1b\n\t\x11\x03\x07\x08\x02s\x81M\x05\r\x99\x90g\xa4\t\n\t\xa7\n\t\x98\n\t\x8c\x03\xaf\x02\x01\xad\t\x04\n\t\xad\n\t]\x03\x07\x08\x02s\n\tM\x99\x90R\xa4\t\n\t\xa7\n\t\x98\n\t\x8c\x03\xaf\x02\x01\xad\t\x04\xa9\x08\x02\n\t\xa7\n\t9\n\t\x16\x03\xaf\x01\x04\x07>\n\t\xae\n\t\xa6\n\t\x84\x02\x99e\n\t^y\t^\x01\x90O\x04\x9a\x01\x87\t\x04\xa9\n\t\xae\n\t\x10\n\t\x97y\n\t\x97\x01\x81p\x05\n\t\x97\x02\n\tp\r\x90\x9d\x04\x9a\x01\xab\t\x04\xa9\xae\n\tL\x08\x02s\n\tp\n\t^\x02\n\tO\n\tN\n\t\x13\x03\x07\n\t\xa1\n\t$\n\t\x03\x04\xa9\n\t\xae\n\t\xad\n\t]\x03\x07\x01\xa0\x02\n\tU\n\t\xa1\n\t(\n\t\x03\x07\x02\xaf\n\t\xa1\n\t\x120\t\x013\t\n\t\xa7\n\t\x88\n\ti\x0b\x01\x8e\t\n\t\xae\n\t\xa1\n\t\'\n\t\x03\x0c\x98\t\n\t\xa7\n\t\x98\n\t\x8c\x03\xaf\x02\x0c\xac\xa3\t\x98\x00\x9c\xaf\x00\x95\n\t\xae\n\t\xa1\n\t\x18\n\t\xae\n\t\xa1\n\t\x15)\t\x04\x01#\t\x04\x01\x1f\t\x04\xac\xa9\x8f\x05\x03\x9b\n\t\xae\n\t\xa6\n\tG\x02\n\tg\xa4\x00Q\x01\xad\x01\rv\n\t\x03\x07\x02\xaf\x00\x8e\xa4\x01\xad\x01t\x04\xa9\x8f\x9b\n\t\xae\n\t[\x03\x07\x02\x02\n\tR\xab\x00\x92\n\t{\x9b\n\t\xae\n\t\x97\x02\n\t\x9d\x04\x9a\x00\xab\x00=\xaf\r\xab\x00\x7f\xaf\xab\x00d\xaf\xab\x00\x7f\xaf\rV\x01\xa3\x00.\xaf\xac\xa0\t\n\t\xae\n\t\xa6\n\tE\x05V\x00\x9d\r\xab\x00Y\xaf\r\xa3\x00\x9d\r\xab\x00\x7f\xaf\r\xab\x00f\xaf\r\xac\xa0\t\n\t\xae\n\t\xa6\n\tD\x05\xab\x00T\xaf\r\xab\x00\x8a\xaf\r\xab\x00\x96\xaf\x94\xa0\t\xaf\x05\x94\x99\x90v\x03\x07\x02\xaf\x08\x02\n\t\xae\n\t\xa1\n\t\x85\x03\x07\n\t\xae\n\t\xa1\n\t\x85\n\t\x03\x07z\t\x04\x94\x01~\t\n\t\xa7\n\t|\n\tr\xa4\x01\xad\x01q\xae\n\t\xa1\n\tF \t\xa4\x01\x89\tv\n\t\x03\x07\x02\xaf\x01\x1c\t\x017\t\xae\n\t\xa1\n\tF\x03\x07\x9e\x9a\x06\x02\xab\x00\x96\xaf\rs\n\tp\xb0\x81u\r\xac\x89\x05\n\t\xae\n\t\xa1\n\t\x85z\t\x94\x01~\t\n\t\xa7\n\t|\n\tr\x01\r\xac\xa9\x93\x05\n\t\xa7\n\t\x88\n\t\\\n\t\x03u\x02\n\to\xaf\r\xac\xa9m\x05\n\t\xa7\n\t\x88\n\t\\\n\t\x03\x02\n\to\xaf\r\xac\xa9\x8f\x05\x03\n\t\xa7\n\t\x98\n\t\x8c\n\thm\x00a\xaf\x00\x9c\xaf\xac\xa9\x8f\x05\xae\n\t\xa1\n\t\x17;\t\x01B\t\x8f\x91\xac\xaa\x05\x89\x00\x8e\x93\x00a\xaf\x00\x9c\xaf\xa8\xaa\xac\x80\x05\x93\x00b\xaf\r\xa4\x00\x9c\n\t\x03\x02\xaf\x00\x95\t\x80\x00\tm\x00b\xaf\x01w\x07\x8b\r\xac\xa9\x93\x05\n\t\xa7\n\t\x88\n\t\\\n\t\x03u\x02\n\to\xaf\r\x91\xac\xaa\x01\xad\x01q\x01\x91\x0b\x86\x04\n\t\xae\n\t\xad\n\tH\x01\xaa\x05\xad\x00:\xaf\x9e\xad\x00A\xaf\xac\xa3\x05\x9e\x9f\xa0\x06\x02\xac\x82\x05\x9f\x00n\xaf\r\xad\x00k\r\xa8\xaa\x04\n\t\xae\n\t\xad\n\t_\x06\x02\xa8\xaa\xacl\x05\xad\x00l\xaf\r\x07\x8b\t\xad\x008\x04l\x04\n\t\xae\n\t\xa6\n\t\x84}\t\xac\x86\t\x1d\r\xac\x9f\x05\x9e\xad\x00\xa3\x01S\x86\x05S\r\xa3\x06\x02\xa3\x01\xac\xa5\xafx\x04\xae\n\t\xa6\n\t\x84\xac\x9f\x05\x9f\x00n\xaf\r\xad\x00k\x91\x86\xad\x00!\xaf\xac\xa2\x05\x9e\xad\x002\xaf\xa8\xa5\x01\xa5\r\xa7\n\t\x98\n\t\"\n\t\x03\xa4\x00\x9c\xaf\x00\x1a\xaf\r\xa8\xa2\r\x9e\xad\x004\xaf\n\t\xae\n\t\xad\n\tJ\n\t\x14\n\t\xae\n\t\xad\n\tJ\n\tK\x06\x02\x9e\xad\x006\xaf\r\xa8\xa5\x87\x00j\x9ec\x00\x1e\xaf\x005\x00d\xaf\r\n\t\xae\n\t\xa6\n\t\x19\n\t1\n\t\xae\n\t\xa6\n\tI\n\tW\n\t\xae\n\t\xa6\n\t\x0f\n\tW\x00f\xaf\r\xac\xa0\t\n\t\xae\n\t\xa6\n\t\x0e\x05\x00/\xaf\rZ\n\t\xae\n\t\x97\r\xac\xa9X\t\x04\xa9\n\t\xae\n\t\xa6\n\tI\x05P\x05X\x00,\xaf\rP\x00<\xaf\rK\n\t*Z\n\t\xae\n\t\x97\r\xac\xa9`\x05\xae\n\tL\n\tC\x05\x04\xa9`\r`\x00-\xaf";
pub const IDENT_SIZE: usize = 161;
static NAMES: &[&str] = &[
    "AlwaysArray",
    "ArrayWriter",
    "BytesWriter",
    "Decoder",
    "Field",
    "FromBinary",
    "Object",
    "ObjectSchemaInner",
    "Result",
    "SkipFieldVisitor",
    "UnsafeReturn",
    "ValueWriter",
    "as_mut",
    "binary",
    "bitset",
    "bool",
    "byte",
    "defaults",
    "destination",
    "discard_remaining_object_fields",
    "drop_in_place",
    "drops",
    "emplace_json_for_with_attribute",
    "enter_object",
    "enter_seen_object",
    "erased_drop_in_place",
    "erased_emplace_from_json",
    "fields",
    "from",
    "in",
    "inner_writer",
    "into_string",
    "iter",
    "join_array_with_next_value",
    "name",
    "new",
    "object_step",
    "offset",
    "peek",
    "push_unchecked_ascii",
    "read_seen_string_unescaped",
    "required",
    "restore_for_retry",
    "result",
    "skip_value",
    "skipped_field",
    "smart_object_comma",
    "start_json_array",
    "static",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "take_string",
    "visitor",
    "with_capacity",
    "AlwaysObject",
    "AlwaysString",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "MISSING_CONTENT_TAG",
    "ObjectWriter",
    "Peek",
    "String",
    "TextWriter",
    "Vistor",
    "binary_decode",
    "binary_encode",
    "builder",
    "byte_add",
    "emplace_from_json",
    "is_at_content",
    "join_object_with_next_value",
    "json_decode",
    "key",
    "non_terminating",
    "object_writer",
    "push_colon",
    "use",
    "FromJson",
    "MaybeUninit",
    "Parser",
    "ToBinary",
    "UNKNOWN_VARIANT",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "decoder",
    "end_json_array",
    "impl",
    "join_parent_json_value_with_next",
    "new_field_visitor",
    "new_unchecked",
    "offset_of",
    "push",
    "report_error",
    "snapshot",
    "temp_flatten",
    "to_string",
    "uninit",
    "Kind",
    "None",
    "PhantomData",
    "Self",
    "Some",
    "__TEMP",
    "__schema_inner",
    "break",
    "else",
    "for",
    "inner",
    "json_encode",
    "marker",
    "message",
    "phantom",
    "push_comma",
    "temp2",
    "type",
    "unknown_variant",
    "where",
    "DecodeError",
    "ObjectSchema",
    "at_content",
    "encoder",
    "mem",
    "schema",
    "start_json_object",
    "success",
    "NonNull",
    "_err",
    "decode",
    "flatten_visitor",
    "fn",
    "if",
    "push_str",
    "temp",
    "const",
    "write",
    "end_json_object",
    "ToJson",
    "ptr",
    "unsafe",
    "self",
    "as",
    "cast",
    "json_encode__jsony",
    "match",
    "variant",
    "_",
    "__internal",
    "err",
    "value",
    "dst",
    "Ok",
    "json",
    "std",
    "return",
    "mut",
    "Err",
    "out",
    "let",
    "parser",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 14;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new('.', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('=', Spacing::Joint),
        Punct::new('\'', Spacing::Joint),
        Punct::new('-', Spacing::Joint),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new('|', Spacing::Alone),
        Punct::new(';', Spacing::Alone),
    ]
}
