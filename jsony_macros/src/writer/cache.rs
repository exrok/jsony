use super::IdentCacheEntry;
use proc_macro::{Punct, Spacing};
pub static
BLIT_SRC: &[u8] = b"f\x03\x06\n\t\x02e\x02\x01\x8bMa\t\x05\xa0\n\t\x1e\n\t\x11\x03\x06\x08\x02t{L\x04\r\x97\x8bi\x9a\t\n\t\x9e\n\t\x96\n\t\x83\x03\xa5\x02\x01\xa2\t\x05\n\t\xa2\n\tG\x03\x06\x08\x02t\n\tL\x97\x8bc\x9a\t\n\t\x9e\n\t\x96\n\t\x83\x03\xa5\x02\x01\xa2\t\x05\xa0\x08\x02\n\t\x9e\n\t9\n\t\x17\x03\xa5\x01\x05\x06=\n\t\xa4\n\t\x9d\n\t}\x02\x97f\n\t]e\t]\x01\x8bN\x05\x8f\x01\x7f\t\x05\xa0\x1c\x03A\x02\n\t\x91e\n\t\x91\x01{r\x04\n\t\x91\x02\n\tr\r\x8b\x94\x05\x8f\x01\xa1\t\x05\xa0\xa4\n\tJ\x08\x02t\n\tr\n\t]\x02\n\tN\x02\n\tM\n\tq\x03\x06\n\t\x13\x03\x06\n\t\x98\n\t(\x02\n\tc\n\t\x98\n\t\x12/\t\x012\t\n\t\x9e\n\t\x88\n\tk\x0b\x01~\t\x9e\n\t\x88\n\t@\x9e\n\t\x96\n\tQ\n\t\x03\x02\x9b\x97\x8b\x0e\xa0\x0c\x96\t\n\t\x9e\n\t\x96\n\t\x83\x03\xa5\x02\x0c\xa3\x8d\t\x96\x00\x92\xa5\x00\x8a\n\t\xa4\n\t\x98\n\t\x1a\n\t\xa4\n\t\x98\n\t\x15)\t\x05\x01%\t\x05\x01\"\t\x05\xa3\xa0\x87\x04\x03\x9b\n\t\xa4\n\t\x9d\n\tE\x02\n\ti\x9a\x00P\x01\xa2\x01\rw\n\t\x03\x06\x02\xa5\x00~\x9a\x01\xa2\x01u\x05\xa0\x87\x9b\n\t\xa4\n\tq\x03\x06\x02\x02\n\tc\xa1\x00\x8c\x9b\n\t\xa4\n\t\x91\x02\n\t\x94\x05\x8f\x00\xa1\x00<\xa5\r\xa1\x00V\xa5\xa1\x00d\xa5\xa1\x00\x81\xa5\r\r\x03\xa1\x00\x86\xa5\x85\x8e\t\xa5\x04\x85\x97\x8bw\x03\x06\x02\xa5\x08\x02\n\t\xa4\n\t\x98\n\ts\x03\x06g\t\x05\x85\x01l\t\n\t\x9e\n\th\n\t\\\x9a\x01\xa2\x01[\xa4\n\t\x98\n\tD#\t\x9a\x01\x80\tw\n\t\x03\x06\x02\xa5\x01\x1f\t\x017\t\xa4\n\t\x98\n\tD\x03\x06\x95\x8f\x07\x02\xa1\x00\x86\xa5\rt\n\tr\xa6{v\r\xa3\x80\x04\n\t\xa4\n\t\x98\n\tsg\t\x85\x01l\t\n\t\x9e\n\th\n\t\\\x01\r\xa3\xa0\x89\x04\n\t\x9e\n\t\x88\n\tZ\n\t\x03v\x02\n\tp\xa5\r\xa3\xa0o\x04\n\t\x9e\n\t\x88\n\tZ\n\t\x03\x02\n\tp\xa5\r\xa3\xa0\x87\x04\x03\n\t\x9e\n\t\x96\n\t\x83\n\tjo\x00_\xa5\x00\x92\xa5\xa3\xa0\x87\x04\xa4\n\t\x98\n\t\x18:\t\x01B\t\x87R\xa3\x9f\x04\x80\x00~\x89\x00_\xa5\x00\x92\xa5\x9c\x9f\xa3z\x04\x89\x00`\xa5\r\x9a\x00\x92\n\t\x03\x02\xa5\x00\x8a\tz\x00\to\x00`\xa5\x01x\x06\x82\r\xa3\xa0\x89\x04\n\t\x9e\n\t\x88\n\tZ\n\t\x03v\x02\n\tp\xa5\rR\xa3\x9f\x01\xa2\x01[\x01\x95\x03\x02\x02\n\t!\x01\x9f\xa3n\x04\xa2\x00n\xa5\r\x06\x82\t\xa2\x008\x05n\x05\n\t\xa4\n\t\x9d\n\t}y\t\xa3\x90\x04\x95\xa2\x00\x07\x02\x8d\x01\x9f\x07\x02\x9c\x9f\xa3\x99\xa5b\x05\xa4\n\t\x9d\n\t}\x95\x90\x8e\x07\x02\xa3\x90\x04\x90\x00X\xa5\r\xa2\x00W\r\x9c\x9f\x05\n\t\xa4\n\t\xa2\n\tK\xa2\x00$\xa5\xa3\x93\x04\x95\xa2\x001\xa5\x9c\x99\x01\x99\r\x9e\n\t\x96\n\tQ\n\t\x03\x9a\x00\x92\xa5\x00\x1d\xa5\r\x9c\x93\r\x95\xa2\x003\xa5\n\t\xa4\n\t\xa2\n\tH\n\t\x14\n\t\xa4\n\t\xa2\n\tH\n\tI\x07\x02\x95\xa2\x006\xa5\xa3\x8d\x04\x95\x90\r\x9c\x99\x7f\x00m\x95a\x00 \xa5\x004\xa5\r\x00V\xa5\r\x005\x00d\xa5\r\n\t\xa4\n\t\x9d\n\t\x1b\n\t0\n\t\xa4\n\t\x9d\n\tF\n\tT\n\t\xa4\n\t\x9d\n\t\x10\n\tT\xa3\x8e\t\n\t\xa4\n\t\x9d\n\t\x19\x04\x00\x94\x00S\xa5\r\xa3\x8e\t\n\t\xa4\n\t\x9d\n\t\x16\x04\x00.\xa5\r\x00S\xa5\r\xa3\x8e\t\n\t\xa4\n\t\x9d\n\t\x0f\x04\x00-\xa5\rY\n\t\xa4\n\t\x91\r\xa3\xa0U\t\x05\xa0\n\t\xa4\n\t\x9d\n\tF\x04O\x04U\x00+\xa5\rO\x00;\xa5\rI\n\t*Y\n\t\xa4\n\t\x91\r\xa3\xa0^\x04\xa4\n\tJ\n\tC\x04\x05\xa0^\r^\x00,\xa5";
pub const IDENT_SIZE: usize = 150;
static NAMES: &[&str] = &[
    "ArrayValue",
    "ArrayWriter",
    "Decoder",
    "Field",
    "FromBinary",
    "Object",
    "ObjectSchemaInner",
    "ObjectValue",
    "Result",
    "SkipFieldVisitor",
    "StringValue",
    "UnsafeReturn",
    "ValueWriter",
    "Vec",
    "as_mut",
    "binary",
    "bitset",
    "byte",
    "decode_json",
    "defaults",
    "destination",
    "discard_remaining_object_fields",
    "drops",
    "enter_object",
    "enter_seen_object",
    "erase",
    "fields",
    "from",
    "inner_writer",
    "into_string",
    "join_array_with_next_value",
    "join_object_with_next_value",
    "name",
    "new",
    "object_step",
    "offset",
    "peek",
    "push_colon",
    "push_unchecked_ascii",
    "read_seen_string_unescaped",
    "required",
    "restore_for_retry",
    "result",
    "skipped_field",
    "smart_object_comma",
    "start_json_array",
    "static",
    "tag_query_at_content_next_object",
    "tag_query_next_object",
    "transmute",
    "u8",
    "visitor",
    "with_capacity",
    "DynamicFieldDecoder",
    "FromJsonFieldVisitor",
    "ObjectWriter",
    "Parser",
    "Peek",
    "String",
    "TextWriter",
    "UNKNOWN_VARIANT",
    "Vistor",
    "binary_decode",
    "binary_encode",
    "builder",
    "byte_add",
    "drop_in_place",
    "if",
    "join_parent_json_value_with_next",
    "non_terminating",
    "object_writer",
    "push_comma",
    "report_error",
    "to_string",
    "use",
    "MaybeUninit",
    "None",
    "PhantomData",
    "ToBinary",
    "_builder",
    "as_mut_ptr",
    "assume_init",
    "decoder",
    "else",
    "emplace_from_json",
    "end_json_array",
    "for",
    "impl",
    "inner",
    "marker",
    "new_field_visitor",
    "new_unchecked",
    "offset_of",
    "phantom",
    "push",
    "snapshot",
    "temp_flatten",
    "uninit",
    "FromJson",
    "Kind",
    "ObjectSchema",
    "Self",
    "Some",
    "__TEMP",
    "__schema_inner",
    "break",
    "message",
    "temp2",
    "type",
    "where",
    "DecodeError",
    "decode",
    "encoder",
    "schema",
    "start_json_object",
    "success",
    "NonNull",
    "_err",
    "const",
    "end_json_object",
    "flatten_visitor",
    "mem",
    "temp",
    "write",
    "fn",
    "push_str",
    "value",
    "_",
    "self",
    "variant",
    "ToJson",
    "cast",
    "err",
    "jsony_to_json_into",
    "match",
    "ptr",
    "unsafe",
    "__internal",
    "Ok",
    "dst",
    "as",
    "return",
    "json",
    "std",
    "Err",
    "mut",
    "out",
    "parser",
    "let",
    "jsony",
];
pub fn ident_cache_initial_state() -> Box<[IdentCacheEntry; IDENT_SIZE]> {
    unsafe {
        let mut cache =
            std::alloc::alloc(std::alloc::Layout::array::<IdentCacheEntry>(IDENT_SIZE).unwrap())
                as *mut IdentCacheEntry;
        for (i, &name) in NAMES.iter().enumerate() {
            std::ptr::write(cache.add(i), IdentCacheEntry::Empty(name));
        }
        Box::from_raw(cache as *mut [IdentCacheEntry; IDENT_SIZE])
    }
}
pub const PUNCT_SIZE: usize = 15;
pub fn punct_cache_initial_state() -> [Punct; PUNCT_SIZE] {
    [
        Punct::new('.', Spacing::Alone),
        Punct::new(',', Spacing::Alone),
        Punct::new('>', Spacing::Alone),
        Punct::new('<', Spacing::Alone),
        Punct::new('=', Spacing::Alone),
        Punct::new('&', Spacing::Alone),
        Punct::new('\'', Spacing::Joint),
        Punct::new('=', Spacing::Joint),
        Punct::new('-', Spacing::Joint),
        Punct::new(':', Spacing::Alone),
        Punct::new(':', Spacing::Joint),
        Punct::new('!', Spacing::Alone),
        Punct::new('|', Spacing::Alone),
        Punct::new(';', Spacing::Alone),
        Punct::new('*', Spacing::Alone),
    ]
}
